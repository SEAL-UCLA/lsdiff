#include "deltaKB_lsdPred.rub"
// Orig. Deleted	4490
// Orig. Added	4586
// Red. Deleted	595
// Red. Added	691
//Package Renaming
//[DNS.utils->org.xbill.DNS.utils]
//[DNS->org.xbill.DNS]

//Class Renaming
//[DNS%.HINFORecord->org.xbill.DNS%.HINFORecord]
//[DNS%.ResolverListener->org.xbill.DNS%.ResolverListener]
//[DNS.utils%.base64->org.xbill.DNS.utils%.base64]
//[DNS%.OPTRecord->org.xbill.DNS%.OPTRecord]
//[DNS%.Address->org.xbill.DNS%.Address]
//[DNS%.TSIG->org.xbill.DNS%.TSIG]
//[DNS%.Master->org.xbill.DNS%.Master]
//[DNS%.TTL->org.xbill.DNS%.TTL]
//[DNS.utils%.StringValueTable->org.xbill.DNS.utils%.StringValueTable]
//[DNS%.SIGRecord->org.xbill.DNS%.SIGRecord]
//[DNS%.NXTRecord->org.xbill.DNS%.NXTRecord]
//[DNS%.Credibility->org.xbill.DNS%.Credibility]
//[DNS.utils%.MyStringTokenizer->org.xbill.DNS.utils%.MyStringTokenizer]
//[DNS%.Cache$Element->org.xbill.DNS%.Cache$Element]
//[DNS%.Rcode->org.xbill.DNS%.Rcode]
//[DNS%.Resolver->org.xbill.DNS%.Resolver]
//[DNS%.NameSet->org.xbill.DNS%.NameSet]
//[DNS%.TypeClass->org.xbill.DNS%.TypeClass]
//[DNS%.RRset->org.xbill.DNS%.RRset]
//[DNS%.DClass->org.xbill.DNS%.DClass]
//[DNS%.dns->org.xbill.DNS%.dns]
//[DNS%.NS_CNAME_PTRRecord->org.xbill.DNS%.NS_CNAME_PTRRecord]
//[DNS%.UNKRecord->org.xbill.DNS%.UNKRecord]
//[DNS%.Compression->org.xbill.DNS%.Compression]
//[DNS%.Message->org.xbill.DNS%.Message]
//[DNS%.KEYRecord->org.xbill.DNS%.KEYRecord]
//[DNS.utils%.hmacSigner->org.xbill.DNS.utils%.hmacSigner]
//[DNS%.Opcode->org.xbill.DNS%.Opcode]
//[DNS%.Record->org.xbill.DNS%.Record]
//[DNS%.SetResponse->org.xbill.DNS%.SetResponse]
//[DNS.utils%.md5->org.xbill.DNS.utils%.md5]
//[DNS%.TSIGRecord->org.xbill.DNS%.TSIGRecord]
//[DNS%.SOARecord->org.xbill.DNS%.SOARecord]
//[DNS%.Type->org.xbill.DNS%.Type]
//[DNS%.Section->org.xbill.DNS%.Section]
//[DNS.utils%.base16->org.xbill.DNS.utils%.base16]
//[DNS%.MXRecord->org.xbill.DNS%.MXRecord]
//[DNS%.ARecord->org.xbill.DNS%.ARecord]
//[DNS%.Cache->org.xbill.DNS%.Cache]
//[DNS.utils%.DataByteOutputStream->org.xbill.DNS.utils%.DataByteOutputStream]
//[DNS%.NSRecord->org.xbill.DNS%.NSRecord]
//[DNS%.ExtendedResolver$Receiver->org.xbill.DNS%.ExtendedResolver$Receiver]
//[DNS%.PTRRecord->org.xbill.DNS%.PTRRecord]
//[DNS%.TXTRecord->org.xbill.DNS%.TXTRecord]
//[DNS%.Flags->org.xbill.DNS%.Flags]
//[DNS%.CERTRecord->org.xbill.DNS%.CERTRecord]
//[DNS%.CNAMERecord->org.xbill.DNS%.CNAMERecord]
//[DNS%.Header->org.xbill.DNS%.Header]
//[DNS%.ExtendedResolver$QElement->org.xbill.DNS%.ExtendedResolver$QElement]
//[DNS%.EDNS->org.xbill.DNS%.EDNS]
//[DNS%.ExtendedResolver->org.xbill.DNS%.ExtendedResolver]
//[DNS%.SRVRecord->org.xbill.DNS%.SRVRecord]
//[DNS%.SimpleResolver->org.xbill.DNS%.SimpleResolver]
//[DNS%.Zone->org.xbill.DNS%.Zone]
//[DNS%.Name->org.xbill.DNS%.Name]
//[DNS.utils%.DataByteInputStream->org.xbill.DNS.utils%.DataByteInputStream]
//[DNS%.FindServer->org.xbill.DNS%.FindServer]

//Method Renaming
//[DNS:MXRecord-MXRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:MXRecord-MXRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:ExtendedResolver-sendTo__[Message, Receiver, Hashtable, int, int]->boolean->org.xbill.DNS:ExtendedResolver-sendTo__[Message, Receiver, Hashtable, int]->void]
//[DNS:Header-incCount__[int]->void->org.xbill.DNS:Header-incCount__[int]->void]
//[DNS.utils:DataByteOutputStream-writeShortAt__[int, int]->void->org.xbill.DNS.utils:DataByteOutputStream-writeShortAt__[int, int]->void]
//[DNS:SOARecord-getSerial__[]->int->org.xbill.DNS:SOARecord-getSerial__[]->int]
//[DNS:Header-setID__[int]->void->org.xbill.DNS:Header-setID__[int]->void]
//[DNS:FindServer-FindServer__[]->void->org.xbill.DNS:FindServer-FindServer__[]->void]
//[DNS:Zone-getOrigin__[]->Name->org.xbill.DNS:Zone-getOrigin__[]->Name]
//[DNS:PTRRecord-PTRRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:PTRRecord-PTRRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:ResolverListener-receiveMessage__[int, Message]->void->org.xbill.DNS:ResolverListener-receiveMessage__[int, Message]->void]
//[DNS.utils:MyStringTokenizer-main__[String]->void->org.xbill.DNS.utils:MyStringTokenizer-main__[String]->void]
//[DNS:dns-inaddrString__[InetAddress]->String->org.xbill.DNS:dns-inaddrString__[InetAddress]->String]
//[DNS:Opcode-Opcode__[]->void->org.xbill.DNS:Opcode-Opcode__[]->void]
//[DNS:Zone-addRecord__[Record]->void->org.xbill.DNS:Zone-addRecord__[Record]->void]
//[DNS:NXTRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:NXTRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:SRVRecord-SRVRecord__[Name, short, int, int, int, int, Name]->void->org.xbill.DNS:SRVRecord-SRVRecord__[Name, short, int, int, int, int, Name]->void]
//[DNS:Header-Header__[]->void->org.xbill.DNS:Header-Header__[]->void]
//[DNS:TSIG-apply__[Message, TSIGRecord]->void->org.xbill.DNS:TSIG-apply__[Message, TSIGRecord]->void]
//[DNS:RRset-sigs__[]->Enumeration->org.xbill.DNS:RRset-sigs__[]->Enumeration]
//[DNS.utils:hmacSigner-addData__[byte[], int, int]->void->org.xbill.DNS.utils:hmacSigner-addData__[byte[], int, int]->void]
//[DNS:Name-wild__[]->Name->org.xbill.DNS:Name-wild__[]->Name]
//[DNS:RRset-toString__[]->String->org.xbill.DNS:RRset-toString__[]->String]
//[DNS:SIGRecord-parseDate__[String]->Date->org.xbill.DNS:SIGRecord-parseDate__[String]->Date]
//[DNS.utils:StringValueTable-getValue__[String]->int->org.xbill.DNS.utils:StringValueTable-getValue__[String]->int]
//[DNS:Header-Header__[DataByteInputStream]->void->org.xbill.DNS:Header-Header__[DataByteInputStream]->void]
//[DNS:ExtendedResolver-ExtendedResolver__[Resolver[]]->void->org.xbill.DNS:ExtendedResolver-ExtendedResolver__[Resolver[]]->void]
//[DNS:TSIGRecord-getError__[]->short->org.xbill.DNS:TSIGRecord-getError__[]->short]
//[DNS:RRset-size__[]->int->org.xbill.DNS:RRset-size__[]->int]
//[DNS:Message-getOPT__[]->OPTRecord->org.xbill.DNS:Message-getOPT__[]->OPTRecord]
//[DNS:SetResponse-SetResponse__[byte, Object]->void->org.xbill.DNS:SetResponse-SetResponse__[byte, Object]->void]
//[DNS:NameSet-toString__[]->String->org.xbill.DNS:NameSet-toString__[]->String]
//[DNS:Zone-getNS__[]->RRset->org.xbill.DNS:Zone-getNS__[]->RRset]
//[DNS:NameSet-findName__[Name]->Hashtable->org.xbill.DNS:NameSet-findName__[Name]->Hashtable]
//[DNS:SRVRecord-SRVRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:SRVRecord-SRVRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:Message-findRecord__[Record]->boolean->org.xbill.DNS:Message-findRecord__[Record]->boolean]
//[DNS.utils:md5-digest__[byte[], int, int, int[]]->void->org.xbill.DNS.utils:md5-digest__[byte[], int, int, int[]]->void]
//[DNS.utils:DataByteInputStream-readInt__[]->int->org.xbill.DNS.utils:DataByteInputStream-readInt__[]->int]
//[DNS:Cache-addRecord__[Record, byte, Object]->void->org.xbill.DNS:Cache-addRecord__[Record, byte, Object]->void]
//[DNS:CERTRecord-CERTRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:CERTRecord-CERTRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:SOARecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:SOARecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:Header-toString__[]->String->org.xbill.DNS:Header-toString__[]->String]
//[DNS:NSRecord-NSRecord__[Name, short, int, Name]->void->org.xbill.DNS:NSRecord-NSRecord__[Name, short, int, Name]->void]
//[DNS.utils:md5-F__[int, int, int]->int->org.xbill.DNS.utils:md5-F__[int, int, int]->int]
//[DNS:DClass-DClass__[]->void->org.xbill.DNS:DClass-DClass__[]->void]
//[DNS:ExtendedResolver-addResolver__[Resolver]->void->org.xbill.DNS:ExtendedResolver-addResolver__[Resolver]->void]
//[DNS.utils:DataByteInputStream-getPos__[]->int->org.xbill.DNS.utils:DataByteInputStream-getPos__[]->int]
//[DNS:SimpleResolver-setPort__[int]->void->org.xbill.DNS:SimpleResolver-setPort__[int]->void]
//[DNS:OPTRecord-OPTRecord__[Name, short, int]->void->org.xbill.DNS:OPTRecord-OPTRecord__[Name, short, int]->void]
//[DNS:SOARecord-SOARecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:SOARecord-SOARecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS.utils:MyStringTokenizer-hasMoreDelimiters__[]->boolean->org.xbill.DNS.utils:MyStringTokenizer-hasMoreDelimiters__[]->boolean]
//[DNS:Master-nextRecord__[]->Record->org.xbill.DNS:Master-nextRecord__[]->Record]
//[DNS:OPTRecord-getExtendedRcode__[]->short->org.xbill.DNS:OPTRecord-getExtendedRcode__[]->short]
//[DNS:MXRecord-toString__[]->String->org.xbill.DNS:MXRecord-toString__[]->String]
//[DNS:Rcode-string__[int]->String->org.xbill.DNS:Rcode-string__[int]->String]
//[DNS:CERTRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:CERTRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:Resolver-send__[Message]->Message->org.xbill.DNS:Resolver-send__[Message]->Message]
//[DNS.utils:base16-toString__[byte[]]->String->org.xbill.DNS.utils:base16-toString__[byte[]]->String]
//[DNS:Flags-Flags__[]->void->org.xbill.DNS:Flags-Flags__[]->void]
//[DNS:ExtendedResolver$Receiver-Receiver__[Vector, Hashtable]->void->org.xbill.DNS:ExtendedResolver$Receiver-Receiver__[Vector, Hashtable]->void]
//[DNS:NS_CNAME_PTRRecord-toString__[]->String->org.xbill.DNS:NS_CNAME_PTRRecord-toString__[]->String]
//[DNS:Header-unsetFlag__[int]->void->org.xbill.DNS:Header-unsetFlag__[int]->void]
//[DNS:Name-isQualified__[]->boolean->org.xbill.DNS:Name-isQualified__[]->boolean]
//[DNS.utils:hmacSigner-clear__[]->void->org.xbill.DNS.utils:hmacSigner-clear__[]->void]
//[DNS:Rcode-value__[String]->byte->org.xbill.DNS:Rcode-value__[String]->byte]
//[DNS:Cache-findAnyRecords__[Name, short, short]->RRset[]->org.xbill.DNS:Cache-findAnyRecords__[Name, short, short]->RRset[]]
//[DNS:UNKRecord-toString__[]->String->org.xbill.DNS:UNKRecord-toString__[]->String]
//[DNS:KEYRecord-getFlags__[]->short->org.xbill.DNS:KEYRecord-getFlags__[]->short]
//[DNS:KEYRecord-getAlgorithm__[]->byte->org.xbill.DNS:KEYRecord-getAlgorithm__[]->byte]
//[DNS:NXTRecord-NXTRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:NXTRecord-NXTRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:Message-toWire__[]->byte[]->org.xbill.DNS:Message-toWire__[]->byte[]]
//[DNS:SRVRecord-getPriority__[]->short->org.xbill.DNS:SRVRecord-getPriority__[]->short]
//[DNS:KEYRecord-KEYRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:KEYRecord-KEYRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:Master-stripTrailing__[String]->String->org.xbill.DNS:Master-stripTrailing__[String]->String]
//[DNS:Message-findRecord__[Record, int]->boolean->org.xbill.DNS:Message-findRecord__[Record, int]->boolean]
//[DNS:Compression-get__[int]->Name->org.xbill.DNS:Compression-get__[int]->Name]
//[DNS:TXTRecord-toString__[]->String->org.xbill.DNS:TXTRecord-toString__[]->String]
//[DNS:Message-addRecord__[Record, int]->void->org.xbill.DNS:Message-addRecord__[Record, int]->void]
//[DNS:Name-Name__[DataByteInputStream, Compression]->void->org.xbill.DNS:Name-Name__[DataByteInputStream, Compression]->void]
//[DNS:SIGRecord-SIGRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:SIGRecord-SIGRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:Record-equals__[Object]->boolean->org.xbill.DNS:Record-equals__[Object]->boolean]
//[DNS.utils:MyStringTokenizer-putBackToken__[String]->void->org.xbill.DNS.utils:MyStringTokenizer-putBackToken__[String]->void]
//[DNS:Address-getAllByName__[String]->InetAddress[]->org.xbill.DNS:Address-getAllByName__[String]->InetAddress[]]
//[DNS:ARecord-ARecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:ARecord-ARecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:RRset-getType__[]->short->org.xbill.DNS:RRset-getType__[]->short]
//[DNS:OPTRecord-getVersion__[]->short->org.xbill.DNS:OPTRecord-getVersion__[]->short]
//[DNS:NXTRecord-NXTRecord__[]->void->org.xbill.DNS:NXTRecord-NXTRecord__[]->void]
//[DNS:Record-getRRsetType__[]->short->org.xbill.DNS:Record-getRRsetType__[]->short]
//[DNS:PTRRecord-PTRRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:PTRRecord-PTRRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:SIGRecord-getLabels__[]->byte->org.xbill.DNS:SIGRecord-getLabels__[]->byte]
//[DNS.utils:md5-md5__[]->void->org.xbill.DNS.utils:md5-md5__[]->void]
//[DNS:FindServer-server__[]->String->org.xbill.DNS:FindServer-server__[]->String]
//[DNS:SIGRecord-getSigner__[]->Name->org.xbill.DNS:SIGRecord-getSigner__[]->Name]
//[DNS:dns-getRecords__[String, short, short]->Record[]->org.xbill.DNS:dns-getRecords__[String, short, short]->Record[]]
//[DNS:SimpleResolver-sendAsync__[Message, ResolverListener]->int->org.xbill.DNS:SimpleResolver-sendAsync__[Message, ResolverListener]->int]
//[DNS:ARecord-ARecord__[Name, short, int, InetAddress]->void->org.xbill.DNS:ARecord-ARecord__[Name, short, int, InetAddress]->void]
//[DNS:TypeClass-TypeClass__[]->void->org.xbill.DNS:TypeClass-TypeClass__[]->void]
//[DNS:SetResponse-isNXDOMAIN__[]->boolean->org.xbill.DNS:SetResponse-isNXDOMAIN__[]->boolean]
//[DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[]->void->org.xbill.DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[]->void]
//[DNS:SOARecord-getHost__[]->Name->org.xbill.DNS:SOARecord-getHost__[]->Name]
//[DNS.utils:md5-G__[int, int, int]->int->org.xbill.DNS.utils:md5-G__[int, int, int]->int]
//[DNS:OPTRecord-getPayloadSize__[]->short->org.xbill.DNS:OPTRecord-getPayloadSize__[]->short]
//[DNS:NXTRecord-toString__[]->String->org.xbill.DNS:NXTRecord-toString__[]->String]
//[DNS.utils:hmacSigner-verify__[byte[]]->boolean->org.xbill.DNS.utils:hmacSigner-verify__[byte[]]->boolean]
//[DNS:SetResponse-addRRset__[RRset]->void->org.xbill.DNS:SetResponse-addRRset__[RRset]->void]
//[DNS.utils:DataByteInputStream-readBigInteger__[int]->BigInteger->org.xbill.DNS.utils:DataByteInputStream-readBigInteger__[int]->BigInteger]
//[DNS:Message-removeRecord__[Record, int]->boolean->org.xbill.DNS:Message-removeRecord__[Record, int]->boolean]
//[DNS:TSIGRecord-getTimeSigned__[]->Date->org.xbill.DNS:TSIGRecord-getTimeSigned__[]->Date]
//[DNS:NameSet-NameSet__[]->void->org.xbill.DNS:NameSet-NameSet__[]->void]
//[DNS:MXRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:MXRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:Type-value__[String]->short->org.xbill.DNS:Type-value__[String]->short]
//[DNS:NameSet-removeSet__[Name, short, short, Object]->void->org.xbill.DNS:NameSet-removeSet__[Name, short, short, Object]->void]
//[DNS:OPTRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:OPTRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:TSIGRecord-getSignature__[]->byte[]->org.xbill.DNS:TSIGRecord-getSignature__[]->byte[]]
//[DNS:ARecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:ARecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:MXRecord-MXRecord__[Name, short, int, int, Name]->void->org.xbill.DNS:MXRecord-MXRecord__[Name, short, int, int, Name]->void]
//[DNS:Section-Section__[]->void->org.xbill.DNS:Section-Section__[]->void]
//[DNS.utils:DataByteInputStream-DataByteInputStream__[byte[]]->void->org.xbill.DNS.utils:DataByteInputStream-DataByteInputStream__[byte[]]->void]
//[DNS:ExtendedResolver-setPort__[int]->void->org.xbill.DNS:ExtendedResolver-setPort__[int]->void]
//[DNS:Record-newRecord__[Name, short, short, int, int, byte[]]->Record->org.xbill.DNS:Record-newRecord__[Name, short, short, int, int, byte[]]->Record]
//[DNS:Header-readFlags__[DataByteInputStream]->void->org.xbill.DNS:Header-readFlags__[DataByteInputStream]->void]
//[DNS:NSRecord-NSRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:NSRecord-NSRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS.utils:hmacSigner-printByteString__[String, byte[], int, int]->void->org.xbill.DNS.utils:hmacSigner-printByteString__[String, byte[], int, int]->void]
//[DNS:Resolver-setPort__[int]->void->org.xbill.DNS:Resolver-setPort__[int]->void]
//[DNS:KEYRecord-getProtocol__[]->byte->org.xbill.DNS:KEYRecord-getProtocol__[]->byte]
//[DNS:TSIGRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:TSIGRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:NXTRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:NXTRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:SetResponse-set__[byte, Object]->void->org.xbill.DNS:SetResponse-set__[byte, Object]->void]
//[DNS:SIGRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:SIGRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:ExtendedResolver-setTSIGKey__[String]->void->org.xbill.DNS:ExtendedResolver-setTSIGKey__[String]->void]
//[DNS:UNKRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:UNKRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:NS_CNAME_PTRRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:NS_CNAME_PTRRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:Resolver-sendAsync__[Message, ResolverListener]->int->org.xbill.DNS:Resolver-sendAsync__[Message, ResolverListener]->int]
//[DNS:Header-writeFlags__[DataByteOutputStream]->void->org.xbill.DNS:Header-writeFlags__[DataByteOutputStream]->void]
//[DNS.utils:MyStringTokenizer-isDelim__[int]->boolean->org.xbill.DNS.utils:MyStringTokenizer-isDelim__[int]->boolean]
//[DNS:HINFORecord-HINFORecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:HINFORecord-HINFORecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS.utils:md5-pad__[byte[], int, int]->byte[]->org.xbill.DNS.utils:md5-pad__[byte[], int, int]->byte[]]
//[DNS.utils:StringValueTable-put2__[int, String]->void->org.xbill.DNS.utils:StringValueTable-put2__[int, String]->void]
//[DNS:SIGRecord-getOrigTTL__[]->int->org.xbill.DNS:SIGRecord-getOrigTTL__[]->int]
//[DNS:KEYRecord-getKey__[]->byte[]->org.xbill.DNS:KEYRecord-getKey__[]->byte[]]
//[DNS.utils:StringValueTable-StringValueTable__[]->void->org.xbill.DNS.utils:StringValueTable-StringValueTable__[]->void]
//[DNS:Message-Message__[byte[]]->void->org.xbill.DNS:Message-Message__[byte[]]->void]
//[DNS:Header-getFlags__[]->boolean[]->org.xbill.DNS:Header-getFlags__[]->boolean[]]
//[DNS.utils:md5-compute__[byte[]]->byte[]->org.xbill.DNS.utils:md5-compute__[byte[]]->byte[]]
//[DNS:CNAMERecord-CNAMERecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:CNAMERecord-CNAMERecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:SetResponse-answers__[]->RRset[]->org.xbill.DNS:SetResponse-answers__[]->RRset[]]
//[DNS:Name-toString__[]->String->org.xbill.DNS:Name-toString__[]->String]
//[DNS:Resolver-setTSIGKey__[String, String]->void->org.xbill.DNS:Resolver-setTSIGKey__[String, String]->void]
//[DNS:SimpleResolver-setTCP__[boolean]->void->org.xbill.DNS:SimpleResolver-setTCP__[boolean]->void]
//[DNS:Resolver-setIgnoreTruncation__[boolean]->void->org.xbill.DNS:Resolver-setIgnoreTruncation__[boolean]->void]
//[DNS:Name-subdomain__[Name]->boolean->org.xbill.DNS:Name-subdomain__[Name]->boolean]
//[DNS:Cache-addRRset__[RRset, byte, Object]->void->org.xbill.DNS:Cache-addRRset__[RRset, byte, Object]->void]
//[DNS:Name-labels__[]->byte->org.xbill.DNS:Name-labels__[]->byte]
//[DNS.utils:md5-ROTATE_LEFT__[int, int]->int->org.xbill.DNS.utils:md5-ROTATE_LEFT__[int, int]->int]
//[DNS:Message-newQuery__[Record]->Message->org.xbill.DNS:Message-newQuery__[Record]->Message]
//[DNS:ARecord-toString__[]->String->org.xbill.DNS:ARecord-toString__[]->String]
//[DNS.utils:hmacSigner-addData__[byte[]]->void->org.xbill.DNS.utils:hmacSigner-addData__[byte[]]->void]
//[DNS:Message-getQuestion__[]->Record->org.xbill.DNS:Message-getQuestion__[]->Record]
//[DNS:Type-isRR__[int]->boolean->org.xbill.DNS:Type-isRR__[int]->boolean]
//[DNS:TSIG-verify__[Message, byte[], TSIGRecord]->boolean->org.xbill.DNS:TSIG-verify__[Message, byte[], TSIGRecord]->boolean]
//[DNS.utils:base16-base16__[]->void->org.xbill.DNS.utils:base16-base16__[]->void]
//[DNS:SIGRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:SIGRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:Record-getDClass__[]->short->org.xbill.DNS:Record-getDClass__[]->short]
//[DNS:Flags-value__[String]->byte->org.xbill.DNS:Flags-value__[String]->byte]
//[DNS:SimpleResolver-uniqueID__[Message]->int->org.xbill.DNS:SimpleResolver-uniqueID__[Message]->int]
//[DNS:Name-Name__[String, Name]->void->org.xbill.DNS:Name-Name__[String, Name]->void]
//[DNS:Zone-getSOA__[]->SOARecord->org.xbill.DNS:Zone-getSOA__[]->SOARecord]
//[DNS:Record-newRecord__[Name, short, short, int, int, DataByteInputStream, Compression]->Record->org.xbill.DNS:Record-newRecord__[Name, short, short, int, int, DataByteInputStream, Compression]->Record]
//[DNS.utils:md5-H__[int, int, int]->int->org.xbill.DNS.utils:md5-H__[int, int, int]->int]
//[DNS:SimpleResolver-setDefaultResolver__[String]->void->org.xbill.DNS:SimpleResolver-setDefaultResolver__[String]->void]
//[DNS:Message-getTSIG__[]->TSIGRecord->org.xbill.DNS:Message-getTSIG__[]->TSIGRecord]
//[DNS:OPTRecord-OPTRecord__[]->void->org.xbill.DNS:OPTRecord-OPTRecord__[]->void]
//[DNS.utils:MyStringTokenizer-hasMoreTokens__[]->boolean->org.xbill.DNS.utils:MyStringTokenizer-hasMoreTokens__[]->boolean]
//[DNS:SetResponse-backtrace__[]->Vector->org.xbill.DNS:SetResponse-backtrace__[]->Vector]
//[DNS:SRVRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:SRVRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:ExtendedResolver-getResolver__[int]->Resolver->org.xbill.DNS:ExtendedResolver-getResolver__[int]->Resolver]
//[DNS:Record-fromWire__[DataByteInputStream, int, Compression]->Record->org.xbill.DNS:Record-fromWire__[DataByteInputStream, int, Compression]->Record]
//[DNS:Message-getSectionArray__[int]->Record[]->org.xbill.DNS:Message-getSectionArray__[int]->Record[]]
//[DNS:Name-hashCode__[]->int->org.xbill.DNS:Name-hashCode__[]->int]
//[DNS:ExtendedResolver-init__[]->void->org.xbill.DNS:ExtendedResolver-init__[]->void]
//[DNS:HINFORecord-HINFORecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:HINFORecord-HINFORecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS.utils:DataByteInputStream-readShort__[]->short->org.xbill.DNS.utils:DataByteInputStream-readShort__[]->short]
//[DNS:Section-value__[String]->byte->org.xbill.DNS:Section-value__[String]->byte]
//[DNS.utils:md5-GG__[int, int, int, int, int, int, int]->int->org.xbill.DNS.utils:md5-GG__[int, int, int, int, int, int, int]->int]
//[DNS:HINFORecord-toString__[]->String->org.xbill.DNS:HINFORecord-toString__[]->String]
//[DNS:Cache$Element-Element__[RRset, byte, int]->void->org.xbill.DNS:Cache$Element-Element__[RRset, byte, int]->void]
//[DNS:dns-matchType__[short, short]->boolean->org.xbill.DNS:dns-matchType__[short, short]->boolean]
//[DNS:OPTRecord-toString__[]->String->org.xbill.DNS:OPTRecord-toString__[]->String]
//[DNS:Type-string__[int]->String->org.xbill.DNS:Type-string__[int]->String]
//[DNS:NSRecord-NSRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:NSRecord-NSRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:RRset-rrs__[]->Enumeration->org.xbill.DNS:RRset-rrs__[]->Enumeration]
//[DNS:NXTRecord-NXTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:NXTRecord-NXTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS.utils:MyStringTokenizer-MyStringTokenizer__[String]->void->org.xbill.DNS.utils:MyStringTokenizer-MyStringTokenizer__[String]->void]
//[DNS:TXTRecord-getStrings__[]->Vector->org.xbill.DNS:TXTRecord-getStrings__[]->Vector]
//[DNS:SimpleResolver-sendAXFR__[Message]->Message->org.xbill.DNS:SimpleResolver-sendAXFR__[Message]->Message]
//[DNS:dns-getAnyRecords__[String, short, short]->Record[]->org.xbill.DNS:dns-getAnyRecords__[String, short, short]->Record[]]
//[DNS:SIGRecord-SIGRecord__[]->void->org.xbill.DNS:SIGRecord-SIGRecord__[]->void]
//[DNS:dns-getAnyRecords__[String, short]->Record[]->org.xbill.DNS:dns-getAnyRecords__[String, short]->Record[]]
//[DNS:MXRecord-MXRecord__[]->void->org.xbill.DNS:MXRecord-MXRecord__[]->void]
//[DNS:dns-lookup__[Name, short, short, byte]->Record[]->org.xbill.DNS:dns-lookup__[Name, short, short, byte]->Record[]]
//[DNS:SOARecord-toString__[]->String->org.xbill.DNS:SOARecord-toString__[]->String]
//[DNS:Rcode-Rcode__[]->void->org.xbill.DNS:Rcode-Rcode__[]->void]
//[DNS:Header-getRcode__[]->byte->org.xbill.DNS:Header-getRcode__[]->byte]
//[DNS:Message-numBytes__[]->int->org.xbill.DNS:Message-numBytes__[]->int]
//[DNS:SetResponse-isNegative__[]->boolean->org.xbill.DNS:SetResponse-isNegative__[]->boolean]
//[DNS:Zone-findExactMatch__[Name, short]->RRset->org.xbill.DNS:Zone-findExactMatch__[Name, short]->RRset]
//[DNS.utils:DataByteInputStream-skipBytes__[int]->void->org.xbill.DNS.utils:DataByteInputStream-skipBytes__[int]->void]
//[DNS:SIGRecord-getAlgorithm__[]->byte->org.xbill.DNS:SIGRecord-getAlgorithm__[]->byte]
//[DNS:Section-string__[int]->String->org.xbill.DNS:Section-string__[int]->String]
//[DNS:Record-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:Record-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:ARecord-ARecord__[]->void->org.xbill.DNS:ARecord-ARecord__[]->void]
//[DNS:TypeClass-hashCode__[]->int->org.xbill.DNS:TypeClass-hashCode__[]->int]
//[DNS:TSIGRecord-getOther__[]->byte[]->org.xbill.DNS:TSIGRecord-getOther__[]->byte[]]
//[DNS:ExtendedResolver-getResolvers__[]->Resolver[]->org.xbill.DNS:ExtendedResolver-getResolvers__[]->Resolver[]]
//[DNS:Header-printFlags__[]->String->org.xbill.DNS:Header-printFlags__[]->String]
//[DNS:NameSet-findExactSet__[Name, short, short]->Object->org.xbill.DNS:NameSet-findExactSet__[Name, short, short]->Object]
//[DNS:HINFORecord-getCPU__[]->String->org.xbill.DNS:HINFORecord-getCPU__[]->String]
//[DNS:ExtendedResolver-sendAsync__[Message, ResolverListener]->int->org.xbill.DNS:ExtendedResolver-sendAsync__[Message, ResolverListener]->int]
//[DNS:ExtendedResolver-uniqueID__[Message]->int->org.xbill.DNS:ExtendedResolver-uniqueID__[Message]->int]
//[DNS:KEYRecord-KEYRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:KEYRecord-KEYRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:Cache$Element-Element__[int, byte, int]->void->org.xbill.DNS:Cache$Element-Element__[int, byte, int]->void]
//[DNS:Message-toString__[]->String->org.xbill.DNS:Message-toString__[]->String]
//[DNS:DClass-value__[String]->short->org.xbill.DNS:DClass-value__[String]->short]
//[DNS:ExtendedResolver$Receiver-receiveMessage__[int, Message]->void->org.xbill.DNS:ExtendedResolver$Receiver-receiveMessage__[int, Message]->void]
//[DNS.utils:md5-I__[int, int, int]->int->org.xbill.DNS.utils:md5-I__[int, int, int]->int]
//[DNS:MXRecord-getPriority__[]->short->org.xbill.DNS:MXRecord-getPriority__[]->short]
//[DNS:Header-getFlag__[int]->boolean->org.xbill.DNS:Header-getFlag__[int]->boolean]
//[DNS:Record-Record__[]->void->org.xbill.DNS:Record-Record__[]->void]
//[DNS:Record-fromString__[Name, short, short, int, MyStringTokenizer, Name]->Record->org.xbill.DNS:Record-fromString__[Name, short, short, int, MyStringTokenizer, Name]->Record]
//[DNS.utils:DataByteOutputStream-getPos__[]->int->org.xbill.DNS.utils:DataByteOutputStream-getPos__[]->int]
//[DNS:TSIGRecord-getAlg__[]->Name->org.xbill.DNS:TSIGRecord-getAlg__[]->Name]
//[DNS.utils:md5-FF__[int, int, int, int, int, int, int]->int->org.xbill.DNS.utils:md5-FF__[int, int, int, int, int, int, int]->int]
//[DNS:TSIGRecord-getOriginalID__[]->int->org.xbill.DNS:TSIGRecord-getOriginalID__[]->int]
//[DNS:Cache$Element-update__[Record]->void->org.xbill.DNS:Cache$Element-update__[Record]->void]
//[DNS:MXRecord-MXRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:MXRecord-MXRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS.utils:DataByteOutputStream-writeString__[String]->void->org.xbill.DNS.utils:DataByteOutputStream-writeString__[String]->void]
//[DNS:Record-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:Record-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:TSIGRecord-toString__[]->String->org.xbill.DNS:TSIGRecord-toString__[]->String]
//[DNS:SimpleResolver-setTSIGKey__[String, String]->void->org.xbill.DNS:SimpleResolver-setTSIGKey__[String, String]->void]
//[DNS:Master-Master__[String]->void->org.xbill.DNS:Master-Master__[String]->void]
//[DNS:TTL-main__[String[]]->void->org.xbill.DNS:TTL-main__[String[]]->void]
//[DNS:Record-Record__[Name, short, short, int]->void->org.xbill.DNS:Record-Record__[Name, short, short, int]->void]
//[DNS.utils:MyStringTokenizer-nextElement__[]->Object->org.xbill.DNS.utils:MyStringTokenizer-nextElement__[]->Object]
//[DNS:SOARecord-getMinimum__[]->int->org.xbill.DNS:SOARecord-getMinimum__[]->int]
//[DNS:Opcode-value__[String]->byte->org.xbill.DNS:Opcode-value__[String]->byte]
//[DNS:SimpleResolver-setIgnoreTruncation__[boolean]->void->org.xbill.DNS:SimpleResolver-setIgnoreTruncation__[boolean]->void]
//[DNS:Record-getTTL__[]->int->org.xbill.DNS:Record-getTTL__[]->int]
//[DNS:Name-length__[]->short->org.xbill.DNS:Name-length__[]->short]
//[DNS:ExtendedResolver-ExtendedResolver__[]->void->org.xbill.DNS:ExtendedResolver-ExtendedResolver__[]->void]
//[DNS:ExtendedResolver-sendAXFR__[Message]->Message->org.xbill.DNS:ExtendedResolver-sendAXFR__[Message]->Message]
//[DNS:Zone-Zone__[String, Cache]->void->org.xbill.DNS:Zone-Zone__[String, Cache]->void]
//[DNS:SOARecord-getRefresh__[]->int->org.xbill.DNS:SOARecord-getRefresh__[]->int]
//[DNS.utils:StringValueTable-getString__[int]->String->org.xbill.DNS.utils:StringValueTable-getString__[int]->String]
//[DNS:ExtendedResolver-ExtendedResolver__[String[]]->void->org.xbill.DNS:ExtendedResolver-ExtendedResolver__[String[]]->void]
//[DNS:SOARecord-getRetry__[]->int->org.xbill.DNS:SOARecord-getRetry__[]->int]
//[DNS:MXRecord-getTarget__[]->Name->org.xbill.DNS:MXRecord-getTarget__[]->Name]
//[DNS:Message-Message__[DataByteInputStream]->void->org.xbill.DNS:Message-Message__[DataByteInputStream]->void]
//[DNS:SimpleResolver-sendTCP__[Message, byte[]]->Message->org.xbill.DNS:SimpleResolver-sendTCP__[Message, byte[]]->Message]
//[DNS:SimpleResolver-setTSIGKey__[String]->void->org.xbill.DNS:SimpleResolver-setTSIGKey__[String]->void]
//[DNS:Record-toClass__[short]->Class->org.xbill.DNS:Record-toClass__[short]->Class]
//[DNS.utils:base64-toString__[byte[]]->String->org.xbill.DNS.utils:base64-toString__[byte[]]->String]
//[DNS:CNAMERecord-CNAMERecord__[]->void->org.xbill.DNS:CNAMERecord-CNAMERecord__[]->void]
//[DNS:SIGRecord-getExpire__[]->Date->org.xbill.DNS:SIGRecord-getExpire__[]->Date]
//[DNS:SIGRecord-getSignature__[]->byte[]->org.xbill.DNS:SIGRecord-getSignature__[]->byte[]]
//[DNS:ExtendedResolver-setTSIGKey__[String, String]->void->org.xbill.DNS:ExtendedResolver-setTSIGKey__[String, String]->void]
//[DNS:TTL-parseTTL__[String]->int->org.xbill.DNS:TTL-parseTTL__[String]->int]
//[DNS.utils:md5-encode__[int[]]->byte[]->org.xbill.DNS.utils:md5-encode__[int[]]->byte[]]
//[DNS:Header-Header__[int]->void->org.xbill.DNS:Header-Header__[int]->void]
//[DNS:SetResponse-addCNAME__[CNAMERecord]->void->org.xbill.DNS:SetResponse-addCNAME__[CNAMERecord]->void]
//[DNS:TSIGRecord-TSIGRecord__[Name, short, int, Name, Date, short, byte[], int, short, byte]->void->org.xbill.DNS:TSIGRecord-TSIGRecord__[Name, short, int, Name, Date, short, byte[], int, short, byte]->void]
//[DNS:SRVRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:SRVRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:SIGRecord-SIGRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:SIGRecord-SIGRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:Header-setCount__[int, int]->void->org.xbill.DNS:Header-setCount__[int, int]->void]
//[DNS:SimpleResolver-SimpleResolver__[String]->void->org.xbill.DNS:SimpleResolver-SimpleResolver__[String]->void]
//[DNS:Header-toWire__[DataByteOutputStream]->void->org.xbill.DNS:Header-toWire__[DataByteOutputStream]->void]
//[DNS.utils:base64-base64__[]->void->org.xbill.DNS.utils:base64-base64__[]->void]
//[DNS.utils:md5-HH__[int, int, int, int, int, int, int]->int->org.xbill.DNS.utils:md5-HH__[int, int, int, int, int, int, int]->int]
//[DNS:SetResponse-SetResponse__[byte]->void->org.xbill.DNS:SetResponse-SetResponse__[byte]->void]
//[DNS:Header-getID__[]->int->org.xbill.DNS:Header-getID__[]->int]
//[DNS.utils:DataByteInputStream-readUnsignedShort__[]->int->org.xbill.DNS.utils:DataByteInputStream-readUnsignedShort__[]->int]
//[DNS.utils:base16-fromString__[String]->byte[]->org.xbill.DNS.utils:base16-fromString__[String]->byte[]]
//[DNS:CERTRecord-getCertType__[]->short->org.xbill.DNS:CERTRecord-getCertType__[]->short]
//[DNS:Message-getHeader__[]->Header->org.xbill.DNS:Message-getHeader__[]->Header]
//[DNS:SIGRecord-getTimeSigned__[]->Date->org.xbill.DNS:SIGRecord-getTimeSigned__[]->Date]
//[DNS:Message-Message__[int]->void->org.xbill.DNS:Message-Message__[int]->void]
//[DNS:dns-getRecordsByAddress__[String, short]->Record[]->org.xbill.DNS:dns-getRecordsByAddress__[String, short]->Record[]]
//[DNS:Resolver-setTCP__[boolean]->void->org.xbill.DNS:Resolver-setTCP__[boolean]->void]
//[DNS:Cache-Cache__[]->void->org.xbill.DNS:Cache-Cache__[]->void]
//[DNS:SIGRecord-toString__[]->String->org.xbill.DNS:SIGRecord-toString__[]->String]
//[DNS:NXTRecord-getNext__[]->Name->org.xbill.DNS:NXTRecord-getNext__[]->Name]
//[DNS:CNAMERecord-CNAMERecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:CNAMERecord-CNAMERecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:NXTRecord-NXTRecord__[Name, short, int, Name, BitSet]->void->org.xbill.DNS:NXTRecord-NXTRecord__[Name, short, int, Name, BitSet]->void]
//[DNS:Record-toWire__[DataByteOutputStream, int, Compression]->void->org.xbill.DNS:Record-toWire__[DataByteOutputStream, int, Compression]->void]
//[DNS.utils:hmacSigner-byteArrayCompare__[byte[], byte[]]->boolean->org.xbill.DNS.utils:hmacSigner-byteArrayCompare__[byte[], byte[]]->boolean]
//[DNS:ExtendedResolver-deleteResolver__[Resolver]->void->org.xbill.DNS:ExtendedResolver-deleteResolver__[Resolver]->void]
//[DNS:HINFORecord-getOS__[]->String->org.xbill.DNS:HINFORecord-getOS__[]->String]
//[DNS:Resolver-setTSIGKey__[String]->void->org.xbill.DNS:Resolver-setTSIGKey__[String]->void]
//[DNS:FindServer-servers__[]->String[]->org.xbill.DNS:FindServer-servers__[]->String[]]
//[DNS.utils:DataByteInputStream-readLong__[]->long->org.xbill.DNS.utils:DataByteInputStream-readLong__[]->long]
//[DNS:SimpleResolver-setTimeout__[int]->void->org.xbill.DNS:SimpleResolver-setTimeout__[int]->void]
//[DNS:SIGRecord-getTypeCovered__[]->short->org.xbill.DNS:SIGRecord-getTypeCovered__[]->short]
//[DNS:Record-newRecord__[Name, short, short]->Record->org.xbill.DNS:Record-newRecord__[Name, short, short]->Record]
//[DNS:KEYRecord-toString__[]->String->org.xbill.DNS:KEYRecord-toString__[]->String]
//[DNS.utils:DataByteOutputStream-DataByteOutputStream__[]->void->org.xbill.DNS.utils:DataByteOutputStream-DataByteOutputStream__[]->void]
//[DNS:Message-sectionToString__[int]->String->org.xbill.DNS:Message-sectionToString__[int]->String]
//[DNS:NS_CNAME_PTRRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:NS_CNAME_PTRRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:TypeClass-TypeClass__[short, short]->void->org.xbill.DNS:TypeClass-TypeClass__[short, short]->void]
//[DNS:TXTRecord-TXTRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:TXTRecord-TXTRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:ExtendedResolver$QElement-QElement__[Message, int]->void->org.xbill.DNS:ExtendedResolver$QElement-QElement__[Object, int]->void]
//[DNS:ARecord-ARecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:ARecord-ARecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS.utils:DataByteInputStream-read__[byte]->int->org.xbill.DNS.utils:DataByteInputStream-read__[byte]->int]
//[DNS:dns-setSearchPath__[String[]]->void->org.xbill.DNS:dns-setSearchPath__[String[]]->void]
//[DNS:Cache-lookupRecords__[Name, short, short, byte]->SetResponse->org.xbill.DNS:Cache-lookupRecords__[Name, short, short, byte]->SetResponse]
//[DNS.utils:DataByteInputStream-readString__[]->String->org.xbill.DNS.utils:DataByteInputStream-readString__[]->String]
//[DNS:dns-getRecords__[String, short]->Record[]->org.xbill.DNS:dns-getRecords__[String, short]->Record[]]
//[DNS:SetResponse-partial__[]->CNAMERecord->org.xbill.DNS:SetResponse-partial__[]->CNAMERecord]
//[DNS:Record-toWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:Record-toWireCanonical__[DataByteOutputStream]->void]
//[DNS:OPTRecord-OPTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:OPTRecord-OPTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:Compression-Compression__[]->void->org.xbill.DNS:Compression-Compression__[]->void]
//[DNS:EDNS-newOPT__[int]->OPTRecord->org.xbill.DNS:EDNS-newOPT__[int]->OPTRecord]
//[DNS:Master-parseOrigin__[MyStringTokenizer]->Name->org.xbill.DNS:Master-parseOrigin__[MyStringTokenizer]->Name]
//[DNS:FindServer-findProperty__[]->void->org.xbill.DNS:FindServer-findProperty__[]->void]
//[DNS:TSIGRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:TSIGRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:PTRRecord-PTRRecord__[Name, short, int, Name]->void->org.xbill.DNS:PTRRecord-PTRRecord__[Name, short, int, Name]->void]
//[DNS:SRVRecord-SRVRecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:SRVRecord-SRVRecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS:TXTRecord-TXTRecord__[Name, short, int, String]->void->org.xbill.DNS:TXTRecord-TXTRecord__[Name, short, int, String]->void]
//[DNS:dns-setResolver__[Resolver]->void->org.xbill.DNS:dns-setResolver__[Resolver]->void]
//[DNS:KEYRecord-KEYRecord__[]->void->org.xbill.DNS:KEYRecord-KEYRecord__[]->void]
//[DNS:Header-randomID__[]->short->org.xbill.DNS:Header-randomID__[]->short]
//[DNS:Cache$Element-toString__[]->String->org.xbill.DNS:Cache$Element-toString__[]->String]
//[DNS:NSRecord-NSRecord__[]->void->org.xbill.DNS:NSRecord-NSRecord__[]->void]
//[DNS:Name-append__[Name]->void->org.xbill.DNS:Name-append__[Name]->void]
//[DNS:SetResponse-isUnknown__[]->boolean->org.xbill.DNS:SetResponse-isUnknown__[]->boolean]
//[DNS:Zone-getDClass__[]->short->org.xbill.DNS:Zone-getDClass__[]->short]
//[DNS:CERTRecord-CERTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:CERTRecord-CERTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:HINFORecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:HINFORecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:SetResponse-SetResponse__[]->void->org.xbill.DNS:SetResponse-SetResponse__[]->void]
//[DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[Name, short, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[Name, short, short, int, MyStringTokenizer, Name]->void]
//[DNS:Message-setHeader__[Header]->void->org.xbill.DNS:Message-setHeader__[Header]->void]
//[DNS:RRset-first__[]->Record->org.xbill.DNS:RRset-first__[]->Record]
//[DNS.utils:MyStringTokenizer-hasMoreElements__[]->boolean->org.xbill.DNS.utils:MyStringTokenizer-hasMoreElements__[]->boolean]
//[DNS.utils:base64-formatString__[byte[], int, String, boolean]->String->org.xbill.DNS.utils:base64-formatString__[byte[], int, String, boolean]->String]
//[DNS:SetResponse-isPartial__[]->boolean->org.xbill.DNS:SetResponse-isPartial__[]->boolean]
//[DNS:RRset-addRR__[Record]->void->org.xbill.DNS:RRset-addRR__[Record]->void]
//[DNS:ExtendedResolver-setTCP__[boolean]->void->org.xbill.DNS:ExtendedResolver-setTCP__[boolean]->void]
//[DNS:ExtendedResolver-setTimeout__[int]->void->org.xbill.DNS:ExtendedResolver-setTimeout__[int]->void]
//[DNS:dns-getRecords__[String, short, short, byte]->Record[]->org.xbill.DNS:dns-getRecords__[String, short, short, byte]->Record[]]
//[DNS.utils:DataByteOutputStream-writeInt__[int]->void->org.xbill.DNS.utils:DataByteOutputStream-writeInt__[int]->void]
//[DNS:TXTRecord-TXTRecord__[Name, short, int, Vector]->void->org.xbill.DNS:TXTRecord-TXTRecord__[Name, short, int, Vector]->void]
//[DNS:NXTRecord-getBitmap__[]->BitSet->org.xbill.DNS:NXTRecord-getBitmap__[]->BitSet]
//[DNS.utils:MyStringTokenizer-MyStringTokenizer__[String, String]->void->org.xbill.DNS.utils:MyStringTokenizer-MyStringTokenizer__[String, String]->void]
//[DNS:CERTRecord-CERTRecord__[]->void->org.xbill.DNS:CERTRecord-CERTRecord__[]->void]
//[DNS.utils:MyStringTokenizer-MyStringTokenizer__[String, String, boolean]->void->org.xbill.DNS.utils:MyStringTokenizer-MyStringTokenizer__[String, String, boolean]->void]
//[DNS:Section-updString__[int]->String->org.xbill.DNS:Section-updString__[int]->String]
//[DNS:ExtendedResolver-send__[Message]->Message->org.xbill.DNS:ExtendedResolver-send__[Message]->Message]
//[DNS:SOARecord-SOARecord__[Name, short, int, Name, Name, int, int, int, int, int]->void->org.xbill.DNS:SOARecord-SOARecord__[Name, short, int, Name, Name, int, int, int, int, int]->void]
//[DNS:Message-Message__[]->void->org.xbill.DNS:Message-Message__[]->void]
//[DNS:Address-getByName__[String]->InetAddress->org.xbill.DNS:Address-getByName__[String]->InetAddress]
//[DNS:SetResponse-toString__[]->String->org.xbill.DNS:SetResponse-toString__[]->String]
//[DNS.utils:md5-II__[int, int, int, int, int, int, int]->int->org.xbill.DNS.utils:md5-II__[int, int, int, int, int, int, int]->int]
//[DNS:Opcode-string__[int]->String->org.xbill.DNS:Opcode-string__[int]->String]
//[DNS:Record-toStringNoData__[]->StringBuffer->org.xbill.DNS:Record-toStringNoData__[]->StringBuffer]
//[DNS.utils:DataByteOutputStream-DataByteOutputStream__[int]->void->org.xbill.DNS.utils:DataByteOutputStream-DataByteOutputStream__[int]->void]
//[DNS:CERTRecord-getCert__[]->byte[]->org.xbill.DNS:CERTRecord-getCert__[]->byte[]]
//[DNS:Type-Type__[]->void->org.xbill.DNS:Type-Type__[]->void]
//[DNS.utils:md5-decode__[byte[], int, int]->int[]->org.xbill.DNS.utils:md5-decode__[byte[], int, int]->int[]]
//[DNS.utils:DataByteInputStream-readByte__[]->byte->org.xbill.DNS.utils:DataByteInputStream-readByte__[]->byte]
//[DNS:Cache-addNegative__[Name, short, short, int, byte, Object]->void->org.xbill.DNS:Cache-addNegative__[Name, short, short, int, byte, Object]->void]
//[DNS:RRset-getName__[]->Name->org.xbill.DNS:RRset-getName__[]->Name]
//[DNS:Name-isWild__[]->boolean->org.xbill.DNS:Name-isWild__[]->boolean]
//[DNS:Cache-Cache__[String]->void->org.xbill.DNS:Cache-Cache__[String]->void]
//[DNS:Cache-addMessage__[Message]->void->org.xbill.DNS:Cache-addMessage__[Message]->void]
//[DNS:SOARecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:SOARecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:TSIG-verifyAXFR__[Message, byte[], TSIGRecord, boolean, boolean]->boolean->org.xbill.DNS:TSIG-verifyAXFR__[Message, byte[], TSIGRecord, boolean, boolean]->boolean]
//[DNS:Record-toString__[]->String->org.xbill.DNS:Record-toString__[]->String]
//[DNS:SRVRecord-getPort__[]->short->org.xbill.DNS:SRVRecord-getPort__[]->short]
//[DNS:Record-getWireLength__[]->short->org.xbill.DNS:Record-getWireLength__[]->short]
//[DNS:SIGRecord-SIGRecord__[Name, short, int, int, int, int, Date, Date, int, Name, byte[]]->void->org.xbill.DNS:SIGRecord-SIGRecord__[Name, short, int, int, int, int, Date, Date, int, Name, byte[]]->void]
//[DNS:Header-setRcode__[byte]->void->org.xbill.DNS:Header-setRcode__[byte]->void]
//[DNS:TXTRecord-TXTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:TXTRecord-TXTRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:Header-setFlag__[int]->void->org.xbill.DNS:Header-setFlag__[int]->void]
//[DNS:SetResponse-isSuccessful__[]->boolean->org.xbill.DNS:SetResponse-isSuccessful__[]->boolean]
//[DNS:PTRRecord-PTRRecord__[]->void->org.xbill.DNS:PTRRecord-PTRRecord__[]->void]
//[DNS:TXTRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:TXTRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:TSIG-TSIG__[String, byte[]]->void->org.xbill.DNS:TSIG-TSIG__[String, byte[]]->void]
//[DNS:Section-longString__[int]->String->org.xbill.DNS:Section-longString__[int]->String]
//[DNS.utils:DataByteInputStream-readUnsignedByte__[]->int->org.xbill.DNS.utils:DataByteInputStream-readUnsignedByte__[]->int]
//[DNS:SimpleResolver-setEDNS__[int]->void->org.xbill.DNS:SimpleResolver-setEDNS__[int]->void]
//[DNS:RRset-getDClass__[]->short->org.xbill.DNS:RRset-getDClass__[]->short]
//[DNS.utils:DataByteOutputStream-writeShort__[int]->void->org.xbill.DNS.utils:DataByteOutputStream-writeShort__[int]->void]
//[DNS:CERTRecord-getAlgorithm__[]->byte->org.xbill.DNS:CERTRecord-getAlgorithm__[]->byte]
//[DNS:KEYRecord-KEYRecord__[Name, short, int, int, int, int, byte[]]->void->org.xbill.DNS:KEYRecord-KEYRecord__[Name, short, int, int, int, int, byte[]]->void]
//[DNS:MXRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:MXRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:FindServer-probe__[]->void->org.xbill.DNS:FindServer-probe__[]->void]
//[DNS:CERTRecord-getKeyTag__[]->short->org.xbill.DNS:CERTRecord-getKeyTag__[]->short]
//[DNS.utils:md5-compute__[byte[], int, int]->byte[]->org.xbill.DNS.utils:md5-compute__[byte[], int, int]->byte[]]
//[DNS:Credibility-Credibility__[]->void->org.xbill.DNS:Credibility-Credibility__[]->void]
//[DNS:Message-getSection__[int]->Enumeration->org.xbill.DNS:Message-getSection__[int]->Enumeration]
//[DNS:dns-dns__[]->void->org.xbill.DNS:dns-dns__[]->void]
//[DNS:Record-hashCode__[]->int->org.xbill.DNS:Record-hashCode__[]->int]
//[DNS.utils:hmacSigner-sign__[]->byte[]->org.xbill.DNS.utils:hmacSigner-sign__[]->byte[]]
//[DNS:Header-getOpcode__[]->byte->org.xbill.DNS:Header-getOpcode__[]->byte]
//[DNS:SimpleResolver-send__[Message]->Message->org.xbill.DNS:SimpleResolver-send__[Message]->Message]
//[DNS:Record-getName__[]->Name->org.xbill.DNS:Record-getName__[]->Name]
//[DNS:Message-clone__[]->Object->org.xbill.DNS:Message-clone__[]->Object]
//[DNS:SRVRecord-SRVRecord__[]->void->org.xbill.DNS:SRVRecord-SRVRecord__[]->void]
//[DNS:SIGRecord-getFootprint__[]->short->org.xbill.DNS:SIGRecord-getFootprint__[]->short]
//[DNS:Record-newRecord__[Name, short, short, int]->Record->org.xbill.DNS:Record-newRecord__[Name, short, short, int]->Record]
//[DNS.utils:DataByteOutputStream-writeBigInteger__[BigInteger]->void->org.xbill.DNS.utils:DataByteOutputStream-writeBigInteger__[BigInteger]->void]
//[DNS:SRVRecord-toString__[]->String->org.xbill.DNS:SRVRecord-toString__[]->String]
//[DNS:TTL-TTL__[]->void->org.xbill.DNS:TTL-TTL__[]->void]
//[DNS:CERTRecord-CERTRecord__[Name, short, int, int, int, int, byte[]]->void->org.xbill.DNS:CERTRecord-CERTRecord__[Name, short, int, int, int, int, byte[]]->void]
//[DNS:Resolver-sendAXFR__[Message]->Message->org.xbill.DNS:Resolver-sendAXFR__[Message]->Message]
//[DNS:SRVRecord-getWeight__[]->short->org.xbill.DNS:SRVRecord-getWeight__[]->short]
//[DNS:RRset-getTTL__[]->int->org.xbill.DNS:RRset-getTTL__[]->int]
//[DNS:Name-toWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:Name-toWireCanonical__[DataByteOutputStream]->void]
//[DNS:HINFORecord-HINFORecord__[]->void->org.xbill.DNS:HINFORecord-HINFORecord__[]->void]
//[DNS.utils:base64-fromString__[String]->byte[]->org.xbill.DNS.utils:base64-fromString__[String]->byte[]]
//[DNS:Name-Name__[String]->void->org.xbill.DNS:Name-Name__[String]->void]
//[DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[Name, short, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[Name, short, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:dns-inaddrString__[String]->String->org.xbill.DNS:dns-inaddrString__[String]->String]
//[DNS:Name-equals__[Object]->boolean->org.xbill.DNS:Name-equals__[Object]->boolean]
//[DNS:Header-getCount__[int]->short->org.xbill.DNS:Header-getCount__[int]->short]
//[DNS:FindServer-findUnix__[]->void->org.xbill.DNS:FindServer-findUnix__[]->void]
//[DNS.utils:DataByteOutputStream-writeLong__[long]->void->org.xbill.DNS.utils:DataByteOutputStream-writeLong__[long]->void]
//[DNS:Master-readExtendedLine__[BufferedReader]->String->org.xbill.DNS:Master-readExtendedLine__[BufferedReader]->String]
//[DNS:RRset-RRset__[]->void->org.xbill.DNS:RRset-RRset__[]->void]
//[DNS:SOARecord-getExpire__[]->int->org.xbill.DNS:SOARecord-getExpire__[]->int]
//[DNS:TSIG-verifyAXFRStart__[]->void->org.xbill.DNS:TSIG-verifyAXFRStart__[]->void]
//[DNS:SOARecord-SOARecord__[]->void->org.xbill.DNS:SOARecord-SOARecord__[]->void]
//[DNS:Resolver-setTimeout__[int]->void->org.xbill.DNS:Resolver-setTimeout__[int]->void]
//[DNS:Address-getHostName__[InetAddress]->String->org.xbill.DNS:Address-getHostName__[InetAddress]->String]
//[DNS:NameSet-findSets__[Name, short, short]->Object[]->org.xbill.DNS:NameSet-findSets__[Name, short, short]->Object[]]
//[DNS:ExtendedResolver-setIgnoreTruncation__[boolean]->void->org.xbill.DNS:ExtendedResolver-setIgnoreTruncation__[boolean]->void]
//[DNS:UNKRecord-UNKRecord__[Name, short, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:UNKRecord-UNKRecord__[Name, short, short, int, MyStringTokenizer, Name]->void]
//[DNS:Cache$Element-Element__[Record, byte, int]->void->org.xbill.DNS:Cache$Element-Element__[Record, byte, int]->void]
//[DNS:CNAMERecord-CNAMERecord__[Name, short, int, Name]->void->org.xbill.DNS:CNAMERecord-CNAMERecord__[Name, short, int, Name]->void]
//[DNS:SimpleResolver-SimpleResolver__[]->void->org.xbill.DNS:SimpleResolver-SimpleResolver__[]->void]
//[DNS:NameSet-addSet__[Name, short, short, Object]->void->org.xbill.DNS:NameSet-addSet__[Name, short, short, Object]->void]
//[DNS:Cache-findRecords__[Name, short, short]->RRset[]->org.xbill.DNS:Cache-findRecords__[Name, short, short]->RRset[]]
//[DNS:KEYRecord-rrToWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:KEYRecord-rrToWire__[DataByteOutputStream, Compression]->void]
//[DNS:Compression-add__[int, Name]->void->org.xbill.DNS:Compression-add__[int, Name]->void]
//[DNS:Message-removeAllRecords__[int]->void->org.xbill.DNS:Message-removeAllRecords__[int]->void]
//[DNS:Header-decCount__[int]->void->org.xbill.DNS:Header-decCount__[int]->void]
//[DNS:NS_CNAME_PTRRecord-getTarget__[]->Name->org.xbill.DNS:NS_CNAME_PTRRecord-getTarget__[]->Name]
//[DNS:TypeClass-equals__[Object]->boolean->org.xbill.DNS:TypeClass-equals__[Object]->boolean]
//[DNS:Header-clone__[]->Object->org.xbill.DNS:Header-clone__[]->Object]
//[DNS:SIGRecord-formatDate__[Date]->String->org.xbill.DNS:SIGRecord-formatDate__[Date]->String]
//[DNS.utils:hmacSigner-hmacSigner__[byte[]]->void->org.xbill.DNS.utils:hmacSigner-hmacSigner__[byte[]]->void]
//[DNS:Message-toWire__[DataByteOutputStream]->void->org.xbill.DNS:Message-toWire__[DataByteOutputStream]->void]
//[DNS:TSIGRecord-getFudge__[]->short->org.xbill.DNS:TSIGRecord-getFudge__[]->short]
//[DNS:Record-getType__[]->short->org.xbill.DNS:Record-getType__[]->short]
//[DNS:DClass-string__[int]->String->org.xbill.DNS:DClass-string__[int]->String]
//[DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[Name, short, short, int, Name]->void->org.xbill.DNS:NS_CNAME_PTRRecord-NS_CNAME_PTRRecord__[Name, short, short, int, Name]->void]
//[DNS:OPTRecord-rrToWireCanonical__[DataByteOutputStream]->void->org.xbill.DNS:OPTRecord-rrToWireCanonical__[DataByteOutputStream]->void]
//[DNS:Cache$Element-expiredTTL__[]->boolean->org.xbill.DNS:Cache$Element-expiredTTL__[]->boolean]
//[DNS.utils:MyStringTokenizer-nextToken__[]->String->org.xbill.DNS.utils:MyStringTokenizer-nextToken__[]->String]
//[DNS:UNKRecord-UNKRecord__[Name, short, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:UNKRecord-UNKRecord__[Name, short, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:SetResponse-isNODATA__[]->boolean->org.xbill.DNS:SetResponse-isNODATA__[]->boolean]
//[DNS:Zone-findRecords__[Name, short]->SetResponse->org.xbill.DNS:Zone-findRecords__[Name, short]->SetResponse]
//[DNS:Header-toWire__[]->byte[]->org.xbill.DNS:Header-toWire__[]->byte[]]
//[DNS:ExtendedResolver-setEDNS__[int]->void->org.xbill.DNS:ExtendedResolver-setEDNS__[int]->void]
//[DNS:RRset-clear__[]->void->org.xbill.DNS:RRset-clear__[]->void]
//[DNS:HINFORecord-HINFORecord__[Name, short, int, String, String]->void->org.xbill.DNS:HINFORecord-HINFORecord__[Name, short, int, String, String]->void]
//[DNS:CERTRecord-toString__[]->String->org.xbill.DNS:CERTRecord-toString__[]->String]
//[DNS:UNKRecord-UNKRecord__[]->void->org.xbill.DNS:UNKRecord-UNKRecord__[]->void]
//[DNS:Resolver-setEDNS__[int]->void->org.xbill.DNS:Resolver-setEDNS__[int]->void]
//[DNS:Compression-get__[Name]->int->org.xbill.DNS:Compression-get__[Name]->int]
//[DNS:Header-setOpcode__[byte]->void->org.xbill.DNS:Header-setOpcode__[byte]->void]
//[DNS:Name-toWire__[DataByteOutputStream, Compression]->void->org.xbill.DNS:Name-toWire__[DataByteOutputStream, Compression]->void]
//[DNS:FindServer-searchPath__[]->Name[]->org.xbill.DNS:FindServer-searchPath__[]->Name[]]
//[DNS:SOARecord-SOARecord__[Name, short, int, MyStringTokenizer, Name]->void->org.xbill.DNS:SOARecord-SOARecord__[Name, short, int, MyStringTokenizer, Name]->void]
//[DNS.utils:DataByteOutputStream-writeByte__[int]->void->org.xbill.DNS.utils:DataByteOutputStream-writeByte__[int]->void]
//[DNS:TSIGRecord-TSIGRecord__[Name, short, int, int, DataByteInputStream, Compression]->void->org.xbill.DNS:TSIGRecord-TSIGRecord__[Name, short, int, int, DataByteInputStream, Compression]->void]
//[DNS:SOARecord-getAdmin__[]->Name->org.xbill.DNS:SOARecord-getAdmin__[]->Name]
//[DNS:Flags-string__[int]->String->org.xbill.DNS:Flags-string__[int]->String]
//[DNS:Master-parseRR__[MyStringTokenizer, boolean, Record, Name]->Record->org.xbill.DNS:Master-parseRR__[MyStringTokenizer, boolean, Record, Name]->Record]
//[DNS:dns-getAnyRecordsByAddress__[String, short]->Record[]->org.xbill.DNS:dns-getAnyRecordsByAddress__[String, short]->Record[]]
//[DNS:Address-isDottedQuad__[String]->boolean->org.xbill.DNS:Address-isDottedQuad__[String]->boolean]
//[DNS:Cache-findRecords__[Name, short, short, byte]->RRset[]->org.xbill.DNS:Cache-findRecords__[Name, short, short, byte]->RRset[]]
//[DNS:ARecord-getAddress__[]->InetAddress->org.xbill.DNS:ARecord-getAddress__[]->InetAddress]
//[DNS:Name-Name__[Name, int]->void->org.xbill.DNS:Name-Name__[Name, int]->void]
//[DNS:SRVRecord-getTarget__[]->Name->org.xbill.DNS:SRVRecord-getTarget__[]->Name]

deleted_accesses("%.dig#name","%.dig#doAXFR(DNS%.Message,DNS%.Resolver)").
deleted_accesses("%.jnamed#TSIGs","%.jnamed#findTSIG(DNS%.Name)").
deleted_accesses("%.jnamed#cache","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)").
deleted_accesses("%.jnamed#cache","%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)").
deleted_accesses("%.jnamed#cache","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("%.jnamed#znames","%.jnamed#findBestZone(DNS%.Name)").
deleted_accesses("%.update#defaultClass","%.update#doAdd(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#defaultClass","%.update#doGlue(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#defaultClass","%.update#doProhibit(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#defaultClass","%.update#doQuery(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#defaultClass","%.update#doRequire(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#defaultTTL","%.update#doAdd(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#defaultTTL","%.update#doGlue(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#log","%.update#doLog(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#origin","%.update#parseName(DNS.utils%.MyStringTokenizer,short)").
deleted_accesses("%.update#origin","%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)").
deleted_accesses("%.update#origin","%.update#parseSet(DNS.utils%.MyStringTokenizer,short)").
deleted_accesses("%.update#query","%.update#doAdd(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#query","%.update#doDelete(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#query","%.update#doGlue(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#query","%.update#doProhibit(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#query","%.update#doRequire(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#res","%.update#doQuery(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#response","%.update#doAssert(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#response","%.update#doQuery(DNS.utils%.MyStringTokenizer)").
deleted_accesses("%.update#server","%.update#doQuery(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#Element#<init>(DNS%.Record,byte,int)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#Element#<init>(int,byte,int)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#Element#toString()").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#addNegative(DNS%.Name,short,short,int,byte,java.lang%.Object)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#addRRset(DNS%.RRset,byte,java.lang%.Object)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#addRecord(DNS%.Record,byte,java.lang%.Object)").
deleted_accesses("DNS%.Cache#Element#credibility","DNS%.Cache#lookupRecords(DNS%.Name,short,short,byte)").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#Element#<init>(DNS%.Record,byte,int)").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#Element#<init>(int,byte,int)").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#Element#toString()").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#Element#update(DNS%.Record)").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#addRecord(DNS%.Record,byte,java.lang%.Object)").
deleted_accesses("DNS%.Cache#Element#rrset","DNS%.Cache#lookupRecords(DNS%.Name,short,short,byte)").
deleted_accesses("DNS%.Cache#Element#srcid","DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)").
deleted_accesses("DNS%.Cache#Element#srcid","DNS%.Cache#Element#<init>(DNS%.Record,byte,int)").
deleted_accesses("DNS%.Cache#Element#srcid","DNS%.Cache#Element#<init>(int,byte,int)").
deleted_accesses("DNS%.Cache#Element#srcid","DNS%.Cache#addRecord(DNS%.Record,byte,java.lang%.Object)").
deleted_accesses("DNS%.Cache#Element#timeIn","DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)").
deleted_accesses("DNS%.Cache#Element#timeIn","DNS%.Cache#Element#<init>(int,byte,int)").
deleted_accesses("DNS%.Cache#Element#timeIn","DNS%.Cache#Element#expiredTTL()").
deleted_accesses("DNS%.Cache#Element#timeIn","DNS%.Cache#Element#update(DNS%.Record)").
deleted_accesses("DNS%.Cache#Element#ttl","DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)").
deleted_accesses("DNS%.Cache#Element#ttl","DNS%.Cache#Element#<init>(DNS%.Record,byte,int)").
deleted_accesses("DNS%.Cache#Element#ttl","DNS%.Cache#Element#<init>(int,byte,int)").
deleted_accesses("DNS%.Cache#Element#ttl","DNS%.Cache#Element#expiredTTL()").
deleted_accesses("DNS%.Cache#Element#ttl","DNS%.Cache#Element#update(DNS%.Record)").
deleted_accesses("DNS%.Credibility#NONAUTH_ANSWER","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.DClass#ANY","%.update#doDelete(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.DClass#ANY","%.update#doRequire(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.DClass#IN","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)").
deleted_accesses("DNS%.DClass#IN","%.jnamed#addGlue(DNS%.Message,DNS%.Name)").
deleted_accesses("DNS%.DClass#NONE","%.update#doDelete(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.DClass#NONE","%.update#doProhibit(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.ExtendedResolver#QElement#m","DNS%.ExtendedResolver#QElement#<init>(DNS%.Message,int)").
deleted_accesses("DNS%.ExtendedResolver#QElement#m","DNS%.ExtendedResolver#send(DNS%.Message)").
deleted_accesses("DNS%.ExtendedResolver#QElement#res","DNS%.ExtendedResolver#QElement#<init>(DNS%.Message,int)").
deleted_accesses("DNS%.ExtendedResolver#QElement#res","DNS%.ExtendedResolver#send(DNS%.Message)").
deleted_accesses("DNS%.ExtendedResolver#Receiver#idMap","DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)").
deleted_accesses("DNS%.ExtendedResolver#Receiver#idMap","DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)").
deleted_accesses("DNS%.ExtendedResolver#Receiver#queue","DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)").
deleted_accesses("DNS%.ExtendedResolver#Receiver#queue","DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)").
deleted_accesses("DNS%.ExtendedResolver#quantum","DNS%.ExtendedResolver#send(DNS%.Message)").
deleted_accesses("DNS%.ExtendedResolver#resolvers","DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)").
deleted_accesses("DNS%.Flags#AA","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.Flags#QR","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.Flags#TC","%.jnamed#truncate(DNS%.Message,int,int)").
deleted_accesses("DNS%.Name#root","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)").
deleted_accesses("DNS%.Name#root","%.jnamed#findBestZone(DNS%.Name)").
deleted_accesses("DNS%.Opcode#QUERY","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.RRset#rrs","DNS%.RRset#rrs()").
deleted_accesses("DNS%.Rcode#NOTIMPL","%.jnamed#notimplMessage(DNS%.Message)").
deleted_accesses("DNS%.Rcode#NXDOMAIN","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.Section#ADDITIONAL","%.dig#doAXFR(DNS%.Message,DNS%.Resolver)").
deleted_accesses("DNS%.Section#ADDITIONAL","%.jnamed#addGlue(DNS%.Message,DNS%.Name)").
deleted_accesses("DNS%.Section#ADDITIONAL","%.jnamed#truncate(DNS%.Message,int,int)").
deleted_accesses("DNS%.Section#ADDITIONAL","%.update#doGlue(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.Section#ANSWER","%.dig#doAXFR(DNS%.Message,DNS%.Resolver)").
deleted_accesses("DNS%.Section#ANSWER","%.jnamed#addAdditional(DNS%.Message)").
deleted_accesses("DNS%.Section#ANSWER","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)").
deleted_accesses("DNS%.Section#ANSWER","%.jnamed#addRRset(DNS%.Message,DNS%.RRset)").
deleted_accesses("DNS%.Section#ANSWER","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.Section#ANSWER","%.jnamed#truncate(DNS%.Message,int,int)").
deleted_accesses("DNS%.Section#AUTHORITY","%.jnamed#addAdditional(DNS%.Message)").
deleted_accesses("DNS%.Section#AUTHORITY","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)").
deleted_accesses("DNS%.Section#AUTHORITY","%.jnamed#truncate(DNS%.Message,int,int)").
deleted_accesses("DNS%.Section#PREREQ","%.update#doProhibit(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.Section#PREREQ","%.update#doRequire(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.Section#QUESTION","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_accesses("DNS%.Section#UPDATE","%.update#doAdd(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.Section#UPDATE","%.update#doDelete(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.TSIGRecord#alg","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.TSIGRecord#error","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.TSIGRecord#fudge","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.TSIGRecord#originalID","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.TSIGRecord#other","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.TSIGRecord#signature","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.TSIGRecord#timeSigned","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.Type#ANY","%.update#parseName(DNS.utils%.MyStringTokenizer,short)").
deleted_accesses("DNS%.Type#AXFR","%.update#doQuery(DNS.utils%.MyStringTokenizer)").
deleted_accesses("DNS%.Type#TSIG","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_accesses("DNS%.WorkerThread#id","DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)").
deleted_accesses("DNS%.WorkerThread#id","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#lifetime","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#list","DNS%.WorkerThread#getThread()").
deleted_accesses("DNS%.WorkerThread#list","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#listener","DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)").
deleted_accesses("DNS%.WorkerThread#listener","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#max","DNS%.WorkerThread#getThread()").
deleted_accesses("DNS%.WorkerThread#max","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#nactive","DNS%.WorkerThread#getThread()").
deleted_accesses("DNS%.WorkerThread#nactive","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#query","DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)").
deleted_accesses("DNS%.WorkerThread#query","DNS%.WorkerThread#run()").
deleted_accesses("DNS%.WorkerThread#res","DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)").
deleted_accesses("DNS%.WorkerThread#res","DNS%.WorkerThread#run()").
deleted_accesses("java.lang%.System#in","%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)").
deleted_accesses("java.lang%.System#in","DNS.utils%.MyStringTokenizer#main(java.lang%.String[])").
deleted_accesses("java.lang%.System#out","%.dig#doAXFR(DNS%.Message,DNS%.Resolver)").
deleted_accesses("java.lang%.System#out","%.dig#doQuery(DNS%.Message,DNS%.Resolver)").
deleted_accesses("java.lang%.System#out","DNS.utils%.MyStringTokenizer#main(java.lang%.String[])").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","DNS%.Header#getCount(int)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","DNS%.Message#getHeader()").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","DNS%.Message#getSection(int)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","DNS%.Resolver#sendAXFR(DNS%.Message)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","java.io%.PrintStream#print(int)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","java.io%.PrintStream#print(java.lang%.String)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.Object)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.String)").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","java.util%.Enumeration#hasMoreElements()").
deleted_calls("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","java.util%.Enumeration#nextElement()").
deleted_calls("%.dig#doQuery(DNS%.Message,DNS%.Resolver)","DNS%.Resolver#send(DNS%.Message)").
deleted_calls("%.dig#doQuery(DNS%.Message,DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.Object)").
deleted_calls("%.dig#doQuery(DNS%.Message,DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.String)").
deleted_calls("%.dig#main(java.lang%.String[])","%.dig#doAXFR(DNS%.Message,DNS%.Resolver)").
deleted_calls("%.dig#main(java.lang%.String[])","%.dig#doQuery(DNS%.Message,DNS%.Resolver)").
deleted_calls("%.jnamed#addAdditional(DNS%.Message)","%.jnamed#addAdditional2(DNS%.Message,int)").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","%.jnamed#addGlue(DNS%.Message,DNS%.Name)").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","DNS%.Message#getSection(int)").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","java.lang%.Class#getMethod(java.lang%.String,java.lang%.Class[])").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","java.lang%.Object#getClass()").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","java.lang.reflect%.Method#invoke(java.lang%.Object,java.lang%.Object[])").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","java.util%.Enumeration#hasMoreElements()").
deleted_calls("%.jnamed#addAdditional2(DNS%.Message,int)","java.util%.Enumeration#nextElement()").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Cache#findRecords(DNS%.Name,short,short)").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Header#getCount(int)").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Message#findRecord(DNS%.Record,int)").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Message#getHeader()").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.RRset#rrs()").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Zone#getNS()").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","DNS%.Zone#getSOA()").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","java.util%.Enumeration#hasMoreElements()").
deleted_calls("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","java.util%.Enumeration#nextElement()").
deleted_calls("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)").
deleted_calls("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","DNS%.Message#findRecord(DNS%.Record)").
deleted_calls("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","DNS%.RRset#rrs()").
deleted_calls("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","java.util%.Enumeration#hasMoreElements()").
deleted_calls("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","java.util%.Enumeration#nextElement()").
deleted_calls("%.jnamed#addRRset(DNS%.Message,DNS%.RRset)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.jnamed#addRRset(DNS%.Message,DNS%.RRset)","DNS%.RRset#rrs()").
deleted_calls("%.jnamed#addRRset(DNS%.Message,DNS%.RRset)","java.util%.Enumeration#hasMoreElements()").
deleted_calls("%.jnamed#addRRset(DNS%.Message,DNS%.RRset)","java.util%.Enumeration#nextElement()").
deleted_calls("%.jnamed#findBestZone(DNS%.Name)","DNS%.Name#<init>(DNS%.Name,int)").
deleted_calls("%.jnamed#findBestZone(DNS%.Name)","DNS%.Name#equals(java.lang%.Object)").
deleted_calls("%.jnamed#findBestZone(DNS%.Name)","java.util%.Hashtable#get(java.lang%.Object)").
deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)","%.jnamed#findBestZone(DNS%.Name)").
deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)","DNS%.Cache#findAnyRecords(DNS%.Name,short,short)").
deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)","DNS%.Cache#findRecords(DNS%.Name,short,short)").
deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)","DNS%.Zone#findExactMatch(DNS%.Name,short)").
deleted_calls("%.jnamed#findTSIG(DNS%.Name)","DNS%.Name#toString()").
deleted_calls("%.jnamed#findTSIG(DNS%.Name)","DNS%.TSIG#<init>(java.lang%.String,byte[])").
deleted_calls("%.jnamed#findTSIG(DNS%.Name)","java.util%.Hashtable#get(java.lang%.Object)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#addAdditional(DNS%.Message)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#addRRset(DNS%.Message,DNS%.RRset)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#findBestZone(DNS%.Name)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#findTSIG(DNS%.Name)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#formerrMessage(byte[])").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#notimplMessage(DNS%.Message)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","%.jnamed#truncate(DNS%.Message,int,int)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Cache#lookupRecords(DNS%.Name,short,short,byte)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Header#getID()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Header#getOpcode()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Header#setFlag(int)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Header#setID(int)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Header#setRcode(byte)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message#<init>()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message#getHeader()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message#getQuestion()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message#getTSIG()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message#toWire()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Record#getDClass()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Record#getName()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Record#getType()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.SetResponse#answers()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.SetResponse#backtrace()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.SetResponse#isNXDOMAIN()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.SetResponse#isSuccessful()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.TSIG#apply(DNS%.Message,DNS%.TSIGRecord)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.TSIG#verify(DNS%.Message,byte[],DNS%.TSIGRecord)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Zone#findRecords(DNS%.Name,short)").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","java.util%.Enumeration#hasMoreElements()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","java.util%.Enumeration#nextElement()").
deleted_calls("%.jnamed#generateReply(DNS%.Message,byte[],int)","java.util%.Vector#elements()").
deleted_calls("%.jnamed#notimplMessage(DNS%.Message)","DNS%.Header#setRcode(byte)").
deleted_calls("%.jnamed#notimplMessage(DNS%.Message)","DNS%.Message#<init>()").
deleted_calls("%.jnamed#notimplMessage(DNS%.Message)","DNS%.Message#getHeader()").
deleted_calls("%.jnamed#notimplMessage(DNS%.Message)","DNS%.Message#removeAllRecords(int)").
deleted_calls("%.jnamed#notimplMessage(DNS%.Message)","DNS%.Message#setHeader(DNS%.Header)").
deleted_calls("%.jnamed#serveTCP(short)","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_calls("%.jnamed#serveUDP(short)","%.jnamed#generateReply(DNS%.Message,byte[],int)").
deleted_calls("%.jnamed#truncate(DNS%.Message,int,int)","%.jnamed#truncateSection(DNS%.Message,int,int,int)").
deleted_calls("%.jnamed#truncate(DNS%.Message,int,int)","DNS%.Header#setFlag(int)").
deleted_calls("%.jnamed#truncate(DNS%.Message,int,int)","DNS%.Message#getHeader()").
deleted_calls("%.jnamed#truncate(DNS%.Message,int,int)","DNS%.Message#getTSIG()").
deleted_calls("%.jnamed#truncate(DNS%.Message,int,int)","DNS%.Message#removeAllRecords(int)").
deleted_calls("%.jnamed#truncate(DNS%.Message,int,int)","DNS%.Record#getWireLength()").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Message#getSectionArray(int)").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Message#removeRecord(DNS%.Record,int)").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Name#equals(java.lang%.Object)").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Record#getDClass()").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Record#getName()").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Record#getType()").
deleted_calls("%.jnamed#truncateSection(DNS%.Message,int,int,int)","DNS%.Record#getWireLength()").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doAdd(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doAssert(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doDelete(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doGlue(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doLog(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doProhibit(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doQuery(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#<init>(java.io%.InputStream)","%.update#doRequire(DNS.utils%.MyStringTokenizer)").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#putBackToken(java.lang%.String)").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
deleted_calls("%.update#doAdd(DNS.utils%.MyStringTokenizer)","java.lang%.String#startsWith(java.lang%.String)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS%.Header#getCount(int)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS%.Header#getRcode()").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS%.Message#getHeader()").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS%.Rcode#string(int)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS%.Rcode#value(java.lang%.String)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS%.Section#value(java.lang%.String)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#hasMoreTokens()").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","java.lang%.Short#<init>(short)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","java.lang%.Short#parseShort(java.lang%.String)").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","java.lang%.Short#toString()").
deleted_calls("%.update#doAssert(DNS.utils%.MyStringTokenizer)","java.lang%.String#equalsIgnoreCase(java.lang%.String)").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","%.update#parseName(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","%.update#parseSet(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doDelete(DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.io%.BufferedReader#<init>(java.io%.Reader)").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.io%.FileInputStream#<init>(java.lang%.String)").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.io%.InputStreamReader#<init>(java.io%.InputStream)").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.lang%.String#equals(java.lang%.Object)").
deleted_calls("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.util%.Vector#addElement(java.lang%.Object)").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#putBackToken(java.lang%.String)").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
deleted_calls("%.update#doGlue(DNS.utils%.MyStringTokenizer)","java.lang%.String#startsWith(java.lang%.String)").
deleted_calls("%.update#doLog(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doLog(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doLog(DNS.utils%.MyStringTokenizer)","java.io%.FileOutputStream#<init>(java.lang%.String)").
deleted_calls("%.update#doLog(DNS.utils%.MyStringTokenizer)","java.io%.PrintStream#<init>(java.io%.OutputStream)").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","%.update#parseName(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","%.update#parseSet(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","%.update#parseSet(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","DNS%.Message#newQuery(DNS%.Record)").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","DNS%.Record#getType()").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","DNS%.Resolver#send(DNS%.Message)").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","DNS%.Resolver#sendAXFR(DNS%.Message)").
deleted_calls("%.update#doQuery(DNS.utils%.MyStringTokenizer)","DNS%.SimpleResolver#<init>(java.lang%.String)").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","%.update#parseName(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","%.update#parseSet(DNS.utils%.MyStringTokenizer,short)").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","DNS%.Message#addRecord(DNS%.Record,int)").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#doRequire(DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
deleted_calls("%.update#parseName(DNS.utils%.MyStringTokenizer,short)","DNS%.Name#<init>(java.lang%.String,DNS%.Name)").
deleted_calls("%.update#parseName(DNS.utils%.MyStringTokenizer,short)","DNS%.Record#newRecord(DNS%.Name,short,short,int)").
deleted_calls("%.update#parseName(DNS.utils%.MyStringTokenizer,short)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS%.DClass#value(java.lang%.String)").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS%.Name#<init>(java.lang%.String,DNS%.Name)").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS%.Record#fromString(DNS%.Name,short,short,int,DNS.utils%.MyStringTokenizer,DNS%.Name)").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS%.TTL#parseTTL(java.lang%.String)").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS%.Type#value(java.lang%.String)").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","java.io%.IOException#<init>(java.lang%.String)").
deleted_calls("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","DNS%.Name#<init>(java.lang%.String,DNS%.Name)").
deleted_calls("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","DNS%.Record#newRecord(DNS%.Name,short,short,int)").
deleted_calls("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","DNS%.Type#value(java.lang%.String)").
deleted_calls("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","java.io%.IOException#<init>(java.lang%.String)").
deleted_calls("DNS%.ARecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.CERTRecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)","DNS%.RRset#getTTL()").
deleted_calls("DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)","java.lang%.System#currentTimeMillis()").
deleted_calls("DNS%.Cache#Element#<init>(DNS%.Record,byte,int)","DNS%.Cache#Element#update(DNS%.Record)").
deleted_calls("DNS%.Cache#Element#<init>(DNS%.Record,byte,int)","DNS%.RRset#<init>()").
deleted_calls("DNS%.Cache#Element#<init>(int,byte,int)","java.lang%.System#currentTimeMillis()").
deleted_calls("DNS%.Cache#addNegative(DNS%.Name,short,short,int,byte,java.lang%.Object)","DNS%.Cache#Element#<init>(int,byte,int)").
deleted_calls("DNS%.Cache#addRRset(DNS%.RRset,byte,java.lang%.Object)","DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)").
deleted_calls("DNS%.Cache#addRecord(DNS%.Record,byte,java.lang%.Object)","DNS%.Cache#Element#<init>(DNS%.Record,byte,int)").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","DNS%.ExtendedResolver#QElement#<init>(DNS%.Message,int)").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","java.lang%.Integer#<init>(int)").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","java.lang%.Integer#intValue()").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","java.lang%.Object#notify()").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","java.util%.Hashtable#get(java.lang%.Object)").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","java.util%.Hashtable#remove(java.lang%.Object)").
deleted_calls("DNS%.ExtendedResolver#Receiver#receiveMessage(int,DNS%.Message)","java.util%.Vector#addElement(java.lang%.Object)").
deleted_calls("DNS%.ExtendedResolver#send(DNS%.Message)","DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)").
deleted_calls("DNS%.ExtendedResolver#send(DNS%.Message)","DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)").
deleted_calls("DNS%.ExtendedResolver#send(DNS%.Message)","java.lang%.Object#wait(long)").
deleted_calls("DNS%.ExtendedResolver#sendAsync(DNS%.Message,DNS%.ResolverListener)","DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)").
deleted_calls("DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)","DNS%.Resolver#sendAsync(DNS%.Message,DNS%.ResolverListener)").
deleted_calls("DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)","java.lang%.Integer#<init>(int)").
deleted_calls("DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)","java.util%.Hashtable#put(java.lang%.Object,java.lang%.Object)").
deleted_calls("DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)","java.util%.Vector#elementAt(int)").
deleted_calls("DNS%.KEYRecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.Name#<init>(DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.OPTRecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.RRset#rrs()","java.util%.Vector#elements()").
deleted_calls("DNS%.Record#equals(java.lang%.Object)","DNS%.Record#toWire(int)").
deleted_calls("DNS%.Record#fromString(DNS%.Name,short,short,int,DNS.utils%.MyStringTokenizer,DNS%.Name)","java.lang%.Class#getConstructor(java.lang%.Class[])").
deleted_calls("DNS%.Record#hashCode()","DNS%.Record#toWire(int)").
deleted_calls("DNS%.Record#newRecord(DNS%.Name,short,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","java.lang%.Class#getConstructor(java.lang%.Class[])").
deleted_calls("DNS%.Record#toWire(int)","DNS%.Record#toWire(DNS.utils%.DataByteOutputStream,int,DNS%.Compression)").
deleted_calls("DNS%.Record#toWire(int)","DNS.utils%.DataByteOutputStream#<init>()").
deleted_calls("DNS%.Record#toWire(int)","java.io%.ByteArrayOutputStream#toByteArray()").
deleted_calls("DNS%.Record#toWireCanonical(int)","DNS%.Record#toWireCanonical(DNS.utils%.DataByteOutputStream)").
deleted_calls("DNS%.Record#toWireCanonical(int)","DNS.utils%.DataByteOutputStream#<init>()").
deleted_calls("DNS%.Record#toWireCanonical(int)","java.io%.ByteArrayOutputStream#toByteArray()").
deleted_calls("DNS%.SIGRecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.SimpleResolver#send(DNS%.Message)","java.io%.PrintStream#println(java.lang%.Object)").
deleted_calls("DNS%.SimpleResolver#sendAsync(DNS%.Message,DNS%.ResolverListener)","DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)").
deleted_calls("DNS%.SimpleResolver#sendTCP(DNS%.Message,byte[])","java.io%.PrintStream#println(java.lang%.Object)").
deleted_calls("DNS%.TSIG#apply(DNS%.Message,DNS%.TSIGRecord)","DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
deleted_calls("DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","DNS%.Record#<init>(DNS%.Name,short,short,int)").
deleted_calls("DNS%.TSIGRecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.TXTRecord#<init>(DNS%.Name,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.UNKRecord#<init>(DNS%.Name,short,short,int,int,DNS.utils%.DataByteInputStream,DNS%.Compression)","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS%.WorkerThread#<init>()","java.lang%.Thread#setDaemon(boolean)").
deleted_calls("DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","DNS%.WorkerThread#getThread()").
deleted_calls("DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","java.lang%.Object#notify()").
deleted_calls("DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","java.lang%.Thread#isAlive()").
deleted_calls("DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","java.lang%.Thread#start()").
deleted_calls("DNS%.WorkerThread#getThread()","DNS%.WorkerThread#<init>()").
deleted_calls("DNS%.WorkerThread#getThread()","java.lang%.Object#wait()").
deleted_calls("DNS%.WorkerThread#getThread()","java.util%.Vector#firstElement()").
deleted_calls("DNS%.WorkerThread#getThread()","java.util%.Vector#removeElement(java.lang%.Object)").
deleted_calls("DNS%.WorkerThread#getThread()","java.util%.Vector#size()").
deleted_calls("DNS%.WorkerThread#run()","DNS%.Message#getQuestion()").
deleted_calls("DNS%.WorkerThread#run()","DNS%.Record#getName()").
deleted_calls("DNS%.WorkerThread#run()","DNS%.Resolver#send(DNS%.Message)").
deleted_calls("DNS%.WorkerThread#run()","DNS%.ResolverListener#receiveMessage(int,DNS%.Message)").
deleted_calls("DNS%.WorkerThread#run()","java.lang%.Object#getClass()").
deleted_calls("DNS%.WorkerThread#run()","java.lang%.Object#notify()").
deleted_calls("DNS%.WorkerThread#run()","java.lang%.Object#wait(long)").
deleted_calls("DNS%.WorkerThread#run()","java.lang%.Thread#setName(java.lang%.String)").
deleted_calls("DNS%.WorkerThread#run()","java.util%.Vector#addElement(java.lang%.Object)").
deleted_calls("DNS.utils%.DataByteInputStream#read(byte[])","java.io%.ByteArrayInputStream#read(byte[],int,int)").
deleted_calls("DNS.utils%.DataByteInputStream#readString()","DNS.utils%.DataByteInputStream#read(byte[])").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","DNS.utils%.MyStringTokenizer#<init>(java.lang%.String)").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","DNS.utils%.MyStringTokenizer#hasMoreTokens()").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","DNS.utils%.MyStringTokenizer#nextToken()").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.BufferedReader#<init>(java.io%.Reader)").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.BufferedReader#readLine()").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.InputStreamReader#<init>(java.io%.InputStream)").
deleted_calls("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.PrintStream#println(java.lang%.String)").
deleted_field("DNS%.Cache#Element#credibility","credibility","DNS%.Cache#Element").
deleted_field("DNS%.Cache#Element#rrset","rrset","DNS%.Cache#Element").
deleted_field("DNS%.Cache#Element#srcid","srcid","DNS%.Cache#Element").
deleted_field("DNS%.Cache#Element#timeIn","timeIn","DNS%.Cache#Element").
deleted_field("DNS%.Cache#Element#ttl","ttl","DNS%.Cache#Element").
deleted_field("DNS%.DNSSEC#DH","DH","DNS%.DNSSEC").
deleted_field("DNS%.DNSSEC#DSA","DSA","DNS%.DNSSEC").
deleted_field("DNS%.DNSSEC#RSA","RSA","DNS%.DNSSEC").
deleted_field("DNS%.ExtendedResolver#QElement#m","m","DNS%.ExtendedResolver#QElement").
deleted_field("DNS%.ExtendedResolver#QElement#res","res","DNS%.ExtendedResolver#QElement").
deleted_field("DNS%.ExtendedResolver#Receiver#idMap","idMap","DNS%.ExtendedResolver#Receiver").
deleted_field("DNS%.ExtendedResolver#Receiver#queue","queue","DNS%.ExtendedResolver#Receiver").
deleted_field("DNS%.WorkerThread#id","id","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#lifetime","lifetime","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#list","list","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#listener","listener","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#max","max","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#nactive","nactive","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#query","query","DNS%.WorkerThread").
deleted_field("DNS%.WorkerThread#res","res","DNS%.WorkerThread").
deleted_fieldoftype("DNS%.Cache#Element#credibility","byte").
deleted_fieldoftype("DNS%.Cache#Element#rrset","DNS%.RRset").
deleted_fieldoftype("DNS%.Cache#Element#srcid","int").
deleted_fieldoftype("DNS%.Cache#Element#timeIn","long").
deleted_fieldoftype("DNS%.Cache#Element#ttl","int").
deleted_fieldoftype("DNS%.DNSSEC#DH","byte").
deleted_fieldoftype("DNS%.DNSSEC#DSA","byte").
deleted_fieldoftype("DNS%.DNSSEC#RSA","byte").
deleted_fieldoftype("DNS%.ExtendedResolver#QElement#m","DNS%.Message").
deleted_fieldoftype("DNS%.ExtendedResolver#QElement#res","int").
deleted_fieldoftype("DNS%.ExtendedResolver#Receiver#idMap","java.util%.Hashtable").
deleted_fieldoftype("DNS%.ExtendedResolver#Receiver#queue","java.util%.Vector").
deleted_fieldoftype("DNS%.FindServer#search","DNS%.Name[]").
deleted_fieldoftype("DNS%.WorkerThread#id","int").
deleted_fieldoftype("DNS%.WorkerThread#lifetime","long").
deleted_fieldoftype("DNS%.WorkerThread#list","java.util%.Vector").
deleted_fieldoftype("DNS%.WorkerThread#listener","DNS%.ResolverListener").
deleted_fieldoftype("DNS%.WorkerThread#max","int").
deleted_fieldoftype("DNS%.WorkerThread#nactive","int").
deleted_fieldoftype("DNS%.WorkerThread#query","DNS%.Message").
deleted_fieldoftype("DNS%.WorkerThread#res","DNS%.Resolver").
deleted_fieldoftype("DNS%.dns#searchPath","DNS%.Name[]").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.ARecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.CERTRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.CNAMERecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.HINFORecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.KEYRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.MXRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.NSRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.NS_CNAME_PTRRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.NXTRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.OPTRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.PTRRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.SIGRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.SOARecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.SRVRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.TSIGRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.TXTRecord").
deleted_inheritedmethod("toWire(int)","DNS%.Record","DNS%.UNKRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.ARecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.CERTRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.CNAMERecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.HINFORecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.KEYRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.MXRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.NSRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.NS_CNAME_PTRRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.NXTRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.OPTRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.PTRRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.SIGRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.SOARecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.SRVRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.TSIGRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.TXTRecord").
deleted_inheritedmethod("toWireCanonical(int)","DNS%.Record","DNS%.UNKRecord").
deleted_method("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","doAXFR(DNS%.Message,DNS%.Resolver)","%.dig").
deleted_method("%.dig#doQuery(DNS%.Message,DNS%.Resolver)","doQuery(DNS%.Message,DNS%.Resolver)","%.dig").
deleted_method("%.jnamed#addAdditional(DNS%.Message)","addAdditional(DNS%.Message)","%.jnamed").
deleted_method("%.jnamed#addAdditional2(DNS%.Message,int)","addAdditional2(DNS%.Message,int)","%.jnamed").
deleted_method("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","%.jnamed").
deleted_method("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","addGlue(DNS%.Message,DNS%.Name)","%.jnamed").
deleted_method("%.jnamed#addRRset(DNS%.Message,DNS%.RRset)","addRRset(DNS%.Message,DNS%.RRset)","%.jnamed").
deleted_method("%.jnamed#findBestZone(DNS%.Name)","findBestZone(DNS%.Name)","%.jnamed").
deleted_method("%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)","findExactMatch(DNS%.Name,short,short,boolean)","%.jnamed").
deleted_method("%.jnamed#findTSIG(DNS%.Name)","findTSIG(DNS%.Name)","%.jnamed").
deleted_method("%.jnamed#generateReply(DNS%.Message,byte[],int)","generateReply(DNS%.Message,byte[],int)","%.jnamed").
deleted_method("%.jnamed#notimplMessage(DNS%.Message)","notimplMessage(DNS%.Message)","%.jnamed").
deleted_method("%.jnamed#truncate(DNS%.Message,int,int)","truncate(DNS%.Message,int,int)","%.jnamed").
deleted_method("%.jnamed#truncateSection(DNS%.Message,int,int,int)","truncateSection(DNS%.Message,int,int,int)","%.jnamed").
deleted_method("%.update#doAdd(DNS.utils%.MyStringTokenizer)","doAdd(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doAssert(DNS.utils%.MyStringTokenizer)","doAssert(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doDelete(DNS.utils%.MyStringTokenizer)","doDelete(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","%.update").
deleted_method("%.update#doGlue(DNS.utils%.MyStringTokenizer)","doGlue(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doLog(DNS.utils%.MyStringTokenizer)","doLog(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","doProhibit(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doQuery(DNS.utils%.MyStringTokenizer)","doQuery(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#doRequire(DNS.utils%.MyStringTokenizer)","doRequire(DNS.utils%.MyStringTokenizer)","%.update").
deleted_method("%.update#parseName(DNS.utils%.MyStringTokenizer,short)","parseName(DNS.utils%.MyStringTokenizer,short)","%.update").
deleted_method("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","parseRR(DNS.utils%.MyStringTokenizer,short,int)","%.update").
deleted_method("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","parseSet(DNS.utils%.MyStringTokenizer,short)","%.update").
deleted_method("DNS%.Address#<init>()","<init>()","DNS%.Address").
deleted_method("DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)","<init>(DNS%.RRset,byte,int)","DNS%.Cache#Element").
deleted_method("DNS%.Cache#Element#<init>(DNS%.Record,byte,int)","<init>(DNS%.Record,byte,int)","DNS%.Cache#Element").
deleted_method("DNS%.Cache#Element#<init>(int,byte,int)","<init>(int,byte,int)","DNS%.Cache#Element").
deleted_method("DNS%.DNSSEC#<init>()","<init>()","DNS%.DNSSEC").
deleted_method("DNS%.EDNS#<init>()","<init>()","DNS%.EDNS").
deleted_method("DNS%.ExtendedResolver#QElement#<init>(DNS%.Message,int)","<init>(DNS%.Message,int)","DNS%.ExtendedResolver#QElement").
deleted_method("DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)","<init>(java.util%.Vector,java.util%.Hashtable)","DNS%.ExtendedResolver#Receiver").
deleted_method("DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)","Receiver,java.util%.Hashtable,int,int)","DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver").
deleted_method("DNS%.Record#toWire(int)","toWire(int)","DNS%.Record").
deleted_method("DNS%.Record#toWireCanonical(int)","toWireCanonical(int)","DNS%.Record").
deleted_method("DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","DNS%.TSIGRecord").
deleted_method("DNS%.WorkerThread#<init>()","<init>()","DNS%.WorkerThread").
deleted_method("DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","DNS%.WorkerThread").
deleted_method("DNS%.WorkerThread#getThread()","getThread()","DNS%.WorkerThread").
deleted_method("DNS%.WorkerThread#run()","run()","DNS%.WorkerThread").
deleted_method("DNS.utils%.DataByteInputStream#read(byte[])","read(byte[])","DNS.utils%.DataByteInputStream").
deleted_method("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","main(java.lang%.String[])","DNS.utils%.MyStringTokenizer").
deleted_return("%.dig#doAXFR(DNS%.Message,DNS%.Resolver)","void").
deleted_return("%.dig#doQuery(DNS%.Message,DNS%.Resolver)","void").
deleted_return("%.jnamed#addAdditional(DNS%.Message)","void").
deleted_return("%.jnamed#addAdditional2(DNS%.Message,int)","void").
deleted_return("%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)","void").
deleted_return("%.jnamed#addGlue(DNS%.Message,DNS%.Name)","void").
deleted_return("%.jnamed#addRRset(DNS%.Message,DNS%.RRset)","void").
deleted_return("%.jnamed#findBestZone(DNS%.Name)","DNS%.Zone").
deleted_return("%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)","DNS%.RRset").
deleted_return("%.jnamed#findTSIG(DNS%.Name)","DNS%.TSIG").
deleted_return("%.jnamed#generateReply(DNS%.Message,byte[],int)","DNS%.Message").
deleted_return("%.jnamed#notimplMessage(DNS%.Message)","DNS%.Message").
deleted_return("%.jnamed#truncate(DNS%.Message,int,int)","void").
deleted_return("%.jnamed#truncateSection(DNS%.Message,int,int,int)","int").
deleted_return("%.update#doAdd(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#doAssert(DNS.utils%.MyStringTokenizer)","boolean").
deleted_return("%.update#doDelete(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#doFile(DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","void").
deleted_return("%.update#doGlue(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#doLog(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#doProhibit(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#doQuery(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#doRequire(DNS.utils%.MyStringTokenizer)","void").
deleted_return("%.update#parseName(DNS.utils%.MyStringTokenizer,short)","DNS%.Record").
deleted_return("%.update#parseRR(DNS.utils%.MyStringTokenizer,short,int)","DNS%.Record").
deleted_return("%.update#parseSet(DNS.utils%.MyStringTokenizer,short)","DNS%.Record").
deleted_return("DNS%.Address#<init>()","void").
deleted_return("DNS%.Cache#Element#<init>(DNS%.RRset,byte,int)","void").
deleted_return("DNS%.Cache#Element#<init>(DNS%.Record,byte,int)","void").
deleted_return("DNS%.Cache#Element#<init>(int,byte,int)","void").
deleted_return("DNS%.Cache#findAnyRecords(DNS%.Name,short,short)","DNS%.RRset[]").
deleted_return("DNS%.Cache#findRecords(DNS%.Name,short,short)","DNS%.RRset[]").
deleted_return("DNS%.Cache#findRecords(DNS%.Name,short,short,byte)","DNS%.RRset[]").
deleted_return("DNS%.DNSSEC#<init>()","void").
deleted_return("DNS%.EDNS#<init>()","void").
deleted_return("DNS%.ExtendedResolver#QElement#<init>(DNS%.Message,int)","void").
deleted_return("DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)","void").
deleted_return("DNS%.ExtendedResolver#getResolvers()","DNS%.Resolver[]").
deleted_return("DNS%.ExtendedResolver#sendTo(DNS%.Message,DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int,int)","boolean").
deleted_return("DNS%.FindServer#searchPath()","DNS%.Name[]").
deleted_return("DNS%.Message#getSectionArray(int)","DNS%.Record[]").
deleted_return("DNS%.Record#toWire(int)","byte[]").
deleted_return("DNS%.Record#toWireCanonical(int)","byte[]").
deleted_return("DNS%.SetResponse#answers()","DNS%.RRset[]").
deleted_return("DNS%.TSIGRecord#<init>(DNS%.Name,short,int,DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","void").
deleted_return("DNS%.WorkerThread#<init>()","void").
deleted_return("DNS%.WorkerThread#assignThread(DNS%.Resolver,DNS%.Message,int,DNS%.ResolverListener)","void").
deleted_return("DNS%.WorkerThread#getThread()","DNS%.WorkerThread").
deleted_return("DNS%.WorkerThread#run()","void").
deleted_return("DNS%.dns#getAnyRecords(java.lang%.String,short)","DNS%.Record[]").
deleted_return("DNS%.dns#getAnyRecords(java.lang%.String,short,short)","DNS%.Record[]").
deleted_return("DNS%.dns#getAnyRecordsByAddress(java.lang%.String,short)","DNS%.Record[]").
deleted_return("DNS%.dns#getRecords(java.lang%.String,short)","DNS%.Record[]").
deleted_return("DNS%.dns#getRecords(java.lang%.String,short,short)","DNS%.Record[]").
deleted_return("DNS%.dns#getRecords(java.lang%.String,short,short,byte)","DNS%.Record[]").
deleted_return("DNS%.dns#getRecordsByAddress(java.lang%.String,short)","DNS%.Record[]").
deleted_return("DNS%.dns#lookup(DNS%.Name,short,short,byte)","DNS%.Record[]").
deleted_return("DNS.utils%.DataByteInputStream#read(byte[])","int").
deleted_return("DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","void").
deleted_subtype("DNS%.ResolverListener","DNS%.ExtendedResolver#Receiver").
deleted_subtype("java.lang%.Object","DNS%.Cache#Element").
deleted_subtype("java.lang%.Object","DNS%.DNSSEC").
deleted_subtype("java.lang%.Object","DNS%.ExtendedResolver#QElement").
deleted_subtype("java.lang%.Object","DNS%.ExtendedResolver#Receiver").
deleted_subtype("java.lang%.Thread","DNS%.WorkerThread").
deleted_subtype("java.util%.EventListener","DNS%.ExtendedResolver#Receiver").
deleted_type("DNS%.Cache#Element","Cache#Element","DNS").
deleted_type("DNS%.DNSSEC","DNSSEC","DNS").
deleted_type("DNS%.ExtendedResolver#QElement","ExtendedResolver#QElement","DNS").
deleted_type("DNS%.ExtendedResolver#Receiver","ExtendedResolver#Receiver","DNS").
deleted_type("DNS%.WorkerThread","WorkerThread","DNS").
deleted_typeintype("DNS%.Cache#Element","DNS%.Cache").
deleted_typeintype("DNS%.ExtendedResolver#QElement","DNS%.ExtendedResolver").
deleted_typeintype("DNS%.ExtendedResolver#Receiver","DNS%.ExtendedResolver").
added_accesses("%.dig#name","%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_accesses("%.jnamed#TSIGs","%.jnamed#findTSIG(org.xbill.DNS%.Name)").
added_accesses("%.jnamed#cache","%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)").
added_accesses("%.jnamed#cache","%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)").
added_accesses("%.jnamed#cache","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("%.jnamed#znames","%.jnamed#findBestZone(org.xbill.DNS%.Name)").
added_accesses("%.update#defaultClass","%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#defaultClass","%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#defaultClass","%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#defaultClass","%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#defaultClass","%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#defaultTTL","%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#defaultTTL","%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#log","%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#origin","%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_accesses("%.update#origin","%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)").
added_accesses("%.update#origin","%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_accesses("%.update#query","%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#query","%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#query","%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#query","%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#query","%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#res","%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#response","%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#response","%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("%.update#server","%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("java.lang%.System#in","%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)").
added_accesses("java.lang%.System#in","org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])").
added_accesses("java.lang%.System#out","%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_accesses("java.lang%.System#out","%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_accesses("java.lang%.System#out","org.xbill.DNS%.ExtendedResolver#Receiver#handleException(int,java.lang%.Exception)").
added_accesses("java.lang%.System#out","org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#Element#<init>(int,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#Element#toString()").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#addNegative(org.xbill.DNS%.Name,short,short,int,byte,java.lang%.Object)").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#addRRset(org.xbill.DNS%.RRset,byte,java.lang%.Object)").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#addRecord(org.xbill.DNS%.Record,byte,java.lang%.Object)").
added_accesses("org.xbill.DNS%.Cache#Element#credibility","org.xbill.DNS%.Cache#lookupRecords(org.xbill.DNS%.Name,short,short,byte)").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#Element#<init>(int,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#Element#toString()").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#Element#update(org.xbill.DNS%.Record)").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#addRecord(org.xbill.DNS%.Record,byte,java.lang%.Object)").
added_accesses("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.Cache#lookupRecords(org.xbill.DNS%.Name,short,short,byte)").
added_accesses("org.xbill.DNS%.Cache#Element#srcid","org.xbill.DNS%.Cache#Element#<init>(int,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#srcid","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#srcid","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#srcid","org.xbill.DNS%.Cache#addRecord(org.xbill.DNS%.Record,byte,java.lang%.Object)").
added_accesses("org.xbill.DNS%.Cache#Element#timeIn","org.xbill.DNS%.Cache#Element#<init>(int,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#timeIn","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#timeIn","org.xbill.DNS%.Cache#Element#expiredTTL()").
added_accesses("org.xbill.DNS%.Cache#Element#timeIn","org.xbill.DNS%.Cache#Element#update(org.xbill.DNS%.Record)").
added_accesses("org.xbill.DNS%.Cache#Element#ttl","org.xbill.DNS%.Cache#Element#<init>(int,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#ttl","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#ttl","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)").
added_accesses("org.xbill.DNS%.Cache#Element#ttl","org.xbill.DNS%.Cache#Element#expiredTTL()").
added_accesses("org.xbill.DNS%.Cache#Element#ttl","org.xbill.DNS%.Cache#Element#update(org.xbill.DNS%.Record)").
added_accesses("org.xbill.DNS%.Credibility#NONAUTH_ANSWER","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.DClass#ANY","%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.DClass#ANY","%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.DClass#IN","%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)").
added_accesses("org.xbill.DNS%.DClass#IN","%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)").
added_accesses("org.xbill.DNS%.DClass#NONE","%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.DClass#NONE","%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.ExtendedResolver#QElement#obj","org.xbill.DNS%.ExtendedResolver#QElement#<init>(java.lang%.Object,int)").
added_accesses("org.xbill.DNS%.ExtendedResolver#QElement#obj","org.xbill.DNS%.ExtendedResolver#send(org.xbill.DNS%.Message)").
added_accesses("org.xbill.DNS%.ExtendedResolver#QElement#res","org.xbill.DNS%.ExtendedResolver#QElement#<init>(java.lang%.Object,int)").
added_accesses("org.xbill.DNS%.ExtendedResolver#QElement#res","org.xbill.DNS%.ExtendedResolver#send(org.xbill.DNS%.Message)").
added_accesses("org.xbill.DNS%.ExtendedResolver#Receiver#idMap","org.xbill.DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)").
added_accesses("org.xbill.DNS%.ExtendedResolver#Receiver#idMap","org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)").
added_accesses("org.xbill.DNS%.ExtendedResolver#Receiver#queue","org.xbill.DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)").
added_accesses("org.xbill.DNS%.ExtendedResolver#Receiver#queue","org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)").
added_accesses("org.xbill.DNS%.ExtendedResolver#resolvers","org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)").
added_accesses("org.xbill.DNS%.ExtendedResolver#retries","org.xbill.DNS%.ExtendedResolver#send(org.xbill.DNS%.Message)").
added_accesses("org.xbill.DNS%.Flags#AA","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.Flags#QR","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.Flags#TC","%.jnamed#truncate(org.xbill.DNS%.Message,int,int)").
added_accesses("org.xbill.DNS%.Name#root","%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)").
added_accesses("org.xbill.DNS%.Name#root","%.jnamed#findBestZone(org.xbill.DNS%.Name)").
added_accesses("org.xbill.DNS%.Opcode#QUERY","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.RRset#Enumerator#count","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#count","org.xbill.DNS%.RRset#Enumerator#hasMoreElements()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#count","org.xbill.DNS%.RRset#Enumerator#nextElement()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#cycled","org.xbill.DNS%.RRset#Enumerator#hasMoreElements()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#cycled","org.xbill.DNS%.RRset#Enumerator#nextElement()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#first","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#first","org.xbill.DNS%.RRset#Enumerator#hasMoreElements()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#first","org.xbill.DNS%.RRset#Enumerator#nextElement()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#records","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#records","org.xbill.DNS%.RRset#Enumerator#nextElement()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#size","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_accesses("org.xbill.DNS%.RRset#Enumerator#size","org.xbill.DNS%.RRset#Enumerator#nextElement()").
added_accesses("org.xbill.DNS%.RRset#rrs","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_accesses("org.xbill.DNS%.RRset#start","org.xbill.DNS%.RRset#<init>()").
added_accesses("org.xbill.DNS%.RRset#start","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_accesses("org.xbill.DNS%.RRset#start","org.xbill.DNS%.RRset#clear()").
added_accesses("org.xbill.DNS%.Rcode#NOTIMPL","%.jnamed#notimplMessage(org.xbill.DNS%.Message)").
added_accesses("org.xbill.DNS%.Rcode#NXDOMAIN","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.ResolveThread#id","org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)").
added_accesses("org.xbill.DNS%.ResolveThread#id","org.xbill.DNS%.ResolveThread#run()").
added_accesses("org.xbill.DNS%.ResolveThread#listener","org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)").
added_accesses("org.xbill.DNS%.ResolveThread#listener","org.xbill.DNS%.ResolveThread#run()").
added_accesses("org.xbill.DNS%.ResolveThread#query","org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)").
added_accesses("org.xbill.DNS%.ResolveThread#query","org.xbill.DNS%.ResolveThread#run()").
added_accesses("org.xbill.DNS%.ResolveThread#res","org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)").
added_accesses("org.xbill.DNS%.ResolveThread#res","org.xbill.DNS%.ResolveThread#run()").
added_accesses("org.xbill.DNS%.Section#ADDITIONAL","%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_accesses("org.xbill.DNS%.Section#ADDITIONAL","%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)").
added_accesses("org.xbill.DNS%.Section#ADDITIONAL","%.jnamed#truncate(org.xbill.DNS%.Message,int,int)").
added_accesses("org.xbill.DNS%.Section#ADDITIONAL","%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.Section#ANSWER","%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_accesses("org.xbill.DNS%.Section#ANSWER","%.jnamed#addAdditional(org.xbill.DNS%.Message)").
added_accesses("org.xbill.DNS%.Section#ANSWER","%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)").
added_accesses("org.xbill.DNS%.Section#ANSWER","%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)").
added_accesses("org.xbill.DNS%.Section#ANSWER","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.Section#ANSWER","%.jnamed#truncate(org.xbill.DNS%.Message,int,int)").
added_accesses("org.xbill.DNS%.Section#AUTHORITY","%.jnamed#addAdditional(org.xbill.DNS%.Message)").
added_accesses("org.xbill.DNS%.Section#AUTHORITY","%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)").
added_accesses("org.xbill.DNS%.Section#AUTHORITY","%.jnamed#truncate(org.xbill.DNS%.Message,int,int)").
added_accesses("org.xbill.DNS%.Section#PREREQ","%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.Section#PREREQ","%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.Section#QUESTION","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_accesses("org.xbill.DNS%.Section#UPDATE","%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.Section#UPDATE","%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.TSIGRecord#alg","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.TSIGRecord#error","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.TSIGRecord#fudge","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.TSIGRecord#originalID","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.TSIGRecord#other","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.TSIGRecord#signature","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.TSIGRecord#timeSigned","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.DNS%.Type#ANY","%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_accesses("org.xbill.DNS%.Type#AXFR","%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)").
added_accesses("org.xbill.DNS%.Type#TSIG","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_accesses("org.xbill.Task%.WorkerThread#lifetime","org.xbill.Task%.WorkerThread#run()").
added_accesses("org.xbill.Task%.WorkerThread#list","org.xbill.Task%.WorkerThread#getThread()").
added_accesses("org.xbill.Task%.WorkerThread#list","org.xbill.Task%.WorkerThread#run()").
added_accesses("org.xbill.Task%.WorkerThread#max","org.xbill.Task%.WorkerThread#getThread()").
added_accesses("org.xbill.Task%.WorkerThread#max","org.xbill.Task%.WorkerThread#run()").
added_accesses("org.xbill.Task%.WorkerThread#nactive","org.xbill.Task%.WorkerThread#getThread()").
added_accesses("org.xbill.Task%.WorkerThread#nactive","org.xbill.Task%.WorkerThread#run()").
added_accesses("org.xbill.Task%.WorkerThread#name","org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)").
added_accesses("org.xbill.Task%.WorkerThread#name","org.xbill.Task%.WorkerThread#run()").
added_accesses("org.xbill.Task%.WorkerThread#task","org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)").
added_accesses("org.xbill.Task%.WorkerThread#task","org.xbill.Task%.WorkerThread#run()").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.io%.PrintStream#print(int)").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.io%.PrintStream#print(java.lang%.String)").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.Object)").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.String)").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.util%.Enumeration#hasMoreElements()").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.util%.Enumeration#nextElement()").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","org.xbill.DNS%.Header#getCount(int)").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","org.xbill.DNS%.Message#getHeader()").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","org.xbill.DNS%.Message#getSection(int)").
added_calls("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","org.xbill.DNS%.Resolver#sendAXFR(org.xbill.DNS%.Message)").
added_calls("%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.Object)").
added_calls("%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","java.io%.PrintStream#println(java.lang%.String)").
added_calls("%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","org.xbill.DNS%.Resolver#send(org.xbill.DNS%.Message)").
added_calls("%.dig#main(java.lang%.String[])","%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_calls("%.dig#main(java.lang%.String[])","%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)").
added_calls("%.jnamed#addAdditional(org.xbill.DNS%.Message)","%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","java.lang%.Class#getMethod(java.lang%.String,java.lang%.Class[])").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","java.lang%.Object#getClass()").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","java.lang.reflect%.Method#invoke(java.lang%.Object,java.lang%.Object[])").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","java.util%.Enumeration#hasMoreElements()").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","java.util%.Enumeration#nextElement()").
added_calls("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","org.xbill.DNS%.Message#getSection(int)").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","java.util%.Enumeration#hasMoreElements()").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","java.util%.Enumeration#nextElement()").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Cache#findRecords(org.xbill.DNS%.Name,short,short)").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Header#getCount(int)").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Message#findRecord(org.xbill.DNS%.Record,int)").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Message#getHeader()").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.RRset#rrs()").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Zone#getNS()").
added_calls("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","org.xbill.DNS%.Zone#getSOA()").
added_calls("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)").
added_calls("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","java.util%.Enumeration#hasMoreElements()").
added_calls("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","java.util%.Enumeration#nextElement()").
added_calls("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","org.xbill.DNS%.Message#findRecord(org.xbill.DNS%.Record)").
added_calls("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","org.xbill.DNS%.RRset#rrs()").
added_calls("%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","java.util%.Enumeration#hasMoreElements()").
added_calls("%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","java.util%.Enumeration#nextElement()").
added_calls("%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","org.xbill.DNS%.RRset#rrs()").
added_calls("%.jnamed#findBestZone(org.xbill.DNS%.Name)","java.util%.Hashtable#get(java.lang%.Object)").
added_calls("%.jnamed#findBestZone(org.xbill.DNS%.Name)","org.xbill.DNS%.Name#<init>(org.xbill.DNS%.Name,int)").
added_calls("%.jnamed#findBestZone(org.xbill.DNS%.Name)","org.xbill.DNS%.Name#equals(java.lang%.Object)").
added_calls("%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","%.jnamed#findBestZone(org.xbill.DNS%.Name)").
added_calls("%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","org.xbill.DNS%.Cache#findAnyRecords(org.xbill.DNS%.Name,short,short)").
added_calls("%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","org.xbill.DNS%.Cache#findRecords(org.xbill.DNS%.Name,short,short)").
added_calls("%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","org.xbill.DNS%.Zone#findExactMatch(org.xbill.DNS%.Name,short)").
added_calls("%.jnamed#findTSIG(org.xbill.DNS%.Name)","java.util%.Hashtable#get(java.lang%.Object)").
added_calls("%.jnamed#findTSIG(org.xbill.DNS%.Name)","org.xbill.DNS%.Name#toString()").
added_calls("%.jnamed#findTSIG(org.xbill.DNS%.Name)","org.xbill.DNS%.TSIG#<init>(java.lang%.String,byte[])").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#addAdditional(org.xbill.DNS%.Message)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#findBestZone(org.xbill.DNS%.Name)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#findTSIG(org.xbill.DNS%.Name)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#formerrMessage(byte[])").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#notimplMessage(org.xbill.DNS%.Message)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed#truncate(org.xbill.DNS%.Message,int,int)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","java.util%.Enumeration#hasMoreElements()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","java.util%.Enumeration#nextElement()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","java.util%.Vector#elements()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Cache#lookupRecords(org.xbill.DNS%.Name,short,short,byte)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Header#getID()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Header#getOpcode()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Header#setFlag(int)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Header#setID(int)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Header#setRcode(byte)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message#<init>()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message#getHeader()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message#getQuestion()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message#getTSIG()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message#toWire()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Record#getDClass()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Record#getName()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Record#getType()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.SetResponse#answers()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.SetResponse#backtrace()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.SetResponse#isNXDOMAIN()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.SetResponse#isSuccessful()").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.TSIG#apply(org.xbill.DNS%.Message,org.xbill.DNS%.TSIGRecord)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.TSIG#verify(org.xbill.DNS%.Message,byte[],org.xbill.DNS%.TSIGRecord)").
added_calls("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Zone#findRecords(org.xbill.DNS%.Name,short)").
added_calls("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","org.xbill.DNS%.Header#setRcode(byte)").
added_calls("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","org.xbill.DNS%.Message#<init>()").
added_calls("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","org.xbill.DNS%.Message#getHeader()").
added_calls("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","org.xbill.DNS%.Message#removeAllRecords(int)").
added_calls("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","org.xbill.DNS%.Message#setHeader(org.xbill.DNS%.Header)").
added_calls("%.jnamed#serveTCP(short)","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_calls("%.jnamed#serveUDP(short)","%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)").
added_calls("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)").
added_calls("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","org.xbill.DNS%.Header#setFlag(int)").
added_calls("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","org.xbill.DNS%.Message#getHeader()").
added_calls("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","org.xbill.DNS%.Message#getTSIG()").
added_calls("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","org.xbill.DNS%.Message#removeAllRecords(int)").
added_calls("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","org.xbill.DNS%.Record#getWireLength()").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Message#getSectionArray(int)").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Message#removeRecord(org.xbill.DNS%.Record,int)").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Name#equals(java.lang%.Object)").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Record#getDClass()").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Record#getName()").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Record#getType()").
added_calls("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","org.xbill.DNS%.Record#getWireLength()").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#<init>(java.io%.InputStream)","%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#startsWith(java.lang%.String)").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#putBackToken(java.lang%.String)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.Short#<init>(short)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.Short#parseShort(java.lang%.String)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.Short#toString()").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#equalsIgnoreCase(java.lang%.String)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Header#getCount(int)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Header#getRcode()").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#getHeader()").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Rcode#string(int)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Rcode#value(java.lang%.String)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Section#value(java.lang%.String)").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#hasMoreTokens()").
added_calls("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","%.update#print(java.lang%.Object)").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.io%.BufferedReader#<init>(java.io%.Reader)").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.io%.FileInputStream#<init>(java.lang%.String)").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.io%.InputStreamReader#<init>(java.io%.InputStream)").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.lang%.String#equals(java.lang%.Object)").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","java.util%.Vector#addElement(java.lang%.Object)").
added_calls("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#startsWith(java.lang%.String)").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#putBackToken(java.lang%.String)").
added_calls("%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)","java.io%.FileOutputStream#<init>(java.lang%.String)").
added_calls("%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)","java.io%.PrintStream#<init>(java.io%.OutputStream)").
added_calls("%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#newQuery(org.xbill.DNS%.Record)").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Record#getType()").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Resolver#send(org.xbill.DNS%.Message)").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Resolver#sendAXFR(org.xbill.DNS%.Message)").
added_calls("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.SimpleResolver#<init>(java.lang%.String)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","%.update#print(java.lang%.Object)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","java.lang%.String#equals(java.lang%.Object)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS%.Message#addRecord(org.xbill.DNS%.Record,int)").
added_calls("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Name#<init>(java.lang%.String,org.xbill.DNS%.Name)").
added_calls("%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Record#newRecord(org.xbill.DNS%.Name,short,short,int)").
added_calls("%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","java.io%.IOException#<init>(java.lang%.String)").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS%.DClass#value(java.lang%.String)").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS%.Name#<init>(java.lang%.String,org.xbill.DNS%.Name)").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS%.Record#fromString(org.xbill.DNS%.Name,short,short,int,org.xbill.DNS.utils%.MyStringTokenizer,org.xbill.DNS%.Name)").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS%.TTL#parseTTL(java.lang%.String)").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS%.Type#value(java.lang%.String)").
added_calls("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","java.io%.IOException#<init>(java.lang%.String)").
added_calls("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Name#<init>(java.lang%.String,org.xbill.DNS%.Name)").
added_calls("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Record#newRecord(org.xbill.DNS%.Name,short,short,int)").
added_calls("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Type#value(java.lang%.String)").
added_calls("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("org.xbill.DNS%.ARecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.CERTRecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.Cache#Element#<init>(int,byte,int)","java.lang%.System#currentTimeMillis()").
added_calls("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)","java.lang%.System#currentTimeMillis()").
added_calls("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)","org.xbill.DNS%.RRset#getTTL()").
added_calls("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)","org.xbill.DNS%.Cache#Element#update(org.xbill.DNS%.Record)").
added_calls("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)","org.xbill.DNS%.RRset#<init>()").
added_calls("org.xbill.DNS%.Cache#addNegative(org.xbill.DNS%.Name,short,short,int,byte,java.lang%.Object)","org.xbill.DNS%.Cache#Element#<init>(int,byte,int)").
added_calls("org.xbill.DNS%.Cache#addRRset(org.xbill.DNS%.RRset,byte,java.lang%.Object)","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)").
added_calls("org.xbill.DNS%.Cache#addRecord(org.xbill.DNS%.Record,byte,java.lang%.Object)","org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","java.lang%.Integer#<init>(int)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","java.lang%.Integer#intValue()").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","java.lang%.Object#notify()").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","java.util%.Hashtable#get(java.lang%.Object)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","java.util%.Hashtable#remove(java.lang%.Object)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","java.util%.Vector#addElement(java.lang%.Object)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","org.xbill.DNS%.ExtendedResolver#QElement#<init>(java.lang%.Object,int)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#handleException(int,java.lang%.Exception)","java.io%.PrintStream#println(java.lang%.String)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#handleException(int,java.lang%.Exception)","org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)").
added_calls("org.xbill.DNS%.ExtendedResolver#Receiver#receiveMessage(int,org.xbill.DNS%.Message)","org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)").
added_calls("org.xbill.DNS%.ExtendedResolver#send(org.xbill.DNS%.Message)","java.lang%.Object#wait()").
added_calls("org.xbill.DNS%.ExtendedResolver#send(org.xbill.DNS%.Message)","org.xbill.DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)").
added_calls("org.xbill.DNS%.ExtendedResolver#send(org.xbill.DNS%.Message)","org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)").
added_calls("org.xbill.DNS%.ExtendedResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","java.lang%.Object#getClass()").
added_calls("org.xbill.DNS%.ExtendedResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.Message#getQuestion()").
added_calls("org.xbill.DNS%.ExtendedResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.Record#getName()").
added_calls("org.xbill.DNS%.ExtendedResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)").
added_calls("org.xbill.DNS%.ExtendedResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)").
added_calls("org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)","java.lang%.Integer#<init>(int)").
added_calls("org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)","java.util%.Hashtable#put(java.lang%.Object,java.lang%.Object)").
added_calls("org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)","java.util%.Vector#elementAt(int)").
added_calls("org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)","org.xbill.DNS%.Resolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)").
added_calls("org.xbill.DNS%.KEYRecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.Name#<init>(org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.OPTRecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.RRset#Enumerator#<init>()","java.util%.Vector#elementAt(int)").
added_calls("org.xbill.DNS%.RRset#Enumerator#<init>()","java.util%.Vector#size()").
added_calls("org.xbill.DNS%.RRset#Enumerator#nextElement()","java.util%.NoSuchElementException#<init>()").
added_calls("org.xbill.DNS%.RRset#rrs()","org.xbill.DNS%.RRset#Enumerator#<init>()").
added_calls("org.xbill.DNS%.Record#equals(java.lang%.Object)","org.xbill.DNS%.Record#toWire(int)").
added_calls("org.xbill.DNS%.Record#fromString(org.xbill.DNS%.Name,short,short,int,org.xbill.DNS.utils%.MyStringTokenizer,org.xbill.DNS%.Name)","java.lang%.Class#getDeclaredConstructor(java.lang%.Class[])").
added_calls("org.xbill.DNS%.Record#hashCode()","org.xbill.DNS%.Record#toWire(int)").
added_calls("org.xbill.DNS%.Record#newRecord(org.xbill.DNS%.Name,short,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","java.lang%.Class#getDeclaredConstructor(java.lang%.Class[])").
added_calls("org.xbill.DNS%.Record#toClass(short)","java.lang%.Class#toString()").
added_calls("org.xbill.DNS%.Record#toClass(short)","java.lang%.String#length()").
added_calls("org.xbill.DNS%.Record#toClass(short)","java.lang%.String#substring(int,int)").
added_calls("org.xbill.DNS%.Record#toWire(int)","java.io%.ByteArrayOutputStream#toByteArray()").
added_calls("org.xbill.DNS%.Record#toWire(int)","org.xbill.DNS%.Record#toWire(org.xbill.DNS.utils%.DataByteOutputStream,int,org.xbill.DNS%.Compression)").
added_calls("org.xbill.DNS%.Record#toWire(int)","org.xbill.DNS.utils%.DataByteOutputStream#<init>()").
added_calls("org.xbill.DNS%.Record#toWireCanonical()","java.io%.ByteArrayOutputStream#toByteArray()").
added_calls("org.xbill.DNS%.Record#toWireCanonical()","org.xbill.DNS%.Record#toWireCanonical(org.xbill.DNS.utils%.DataByteOutputStream)").
added_calls("org.xbill.DNS%.Record#toWireCanonical()","org.xbill.DNS.utils%.DataByteOutputStream#<init>()").
added_calls("org.xbill.DNS%.ResolveThread#run()","org.xbill.DNS%.Resolver#send(org.xbill.DNS%.Message)").
added_calls("org.xbill.DNS%.ResolveThread#run()","org.xbill.DNS%.ResolverListener#handleException(int,java.lang%.Exception)").
added_calls("org.xbill.DNS%.ResolveThread#run()","org.xbill.DNS%.ResolverListener#receiveMessage(int,org.xbill.DNS%.Message)").
added_calls("org.xbill.DNS%.SIGRecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.SimpleResolver#send(org.xbill.DNS%.Message)","org.xbill.DNS%.WireParseException#<init>(java.lang%.String)").
added_calls("org.xbill.DNS%.SimpleResolver#sendAXFR(org.xbill.DNS%.Message)","org.xbill.DNS%.WireParseException#<init>(java.lang%.String)").
added_calls("org.xbill.DNS%.SimpleResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","java.lang%.Object#getClass()").
added_calls("org.xbill.DNS%.SimpleResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.Message#getQuestion()").
added_calls("org.xbill.DNS%.SimpleResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.Record#getName()").
added_calls("org.xbill.DNS%.SimpleResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)").
added_calls("org.xbill.DNS%.SimpleResolver#sendAsync(org.xbill.DNS%.Message,org.xbill.DNS%.ResolverListener)","org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)").
added_calls("org.xbill.DNS%.SimpleResolver#sendTCP(org.xbill.DNS%.Message,byte[])","org.xbill.DNS%.WireParseException#<init>(java.lang%.String)").
added_calls("org.xbill.DNS%.TSIG#apply(org.xbill.DNS%.Message,org.xbill.DNS%.TSIGRecord)","org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])").
added_calls("org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","org.xbill.DNS%.Record#<init>(org.xbill.DNS%.Name,short,short,int)").
added_calls("org.xbill.DNS%.TXTRecord#<init>(org.xbill.DNS%.Name,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.UNKRecord#<init>(org.xbill.DNS%.Name,short,short,int,int,org.xbill.DNS.utils%.DataByteInputStream,org.xbill.DNS%.Compression)","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS%.WireParseException#<init>()","java.io%.IOException#<init>()").
added_calls("org.xbill.DNS%.WireParseException#<init>(java.lang%.String)","java.io%.IOException#<init>(java.lang%.String)").
added_calls("org.xbill.DNS.utils%.DataByteInputStream#read(byte[])","java.io%.ByteArrayInputStream#read(byte[],int,int)").
added_calls("org.xbill.DNS.utils%.DataByteInputStream#readString()","org.xbill.DNS.utils%.DataByteInputStream#read(byte[])").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.BufferedReader#<init>(java.io%.Reader)").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.BufferedReader#readLine()").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.InputStreamReader#<init>(java.io%.InputStream)").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","java.io%.PrintStream#println(java.lang%.String)").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","org.xbill.DNS.utils%.MyStringTokenizer#<init>(java.lang%.String)").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","org.xbill.DNS.utils%.MyStringTokenizer#hasMoreTokens()").
added_calls("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","org.xbill.DNS.utils%.MyStringTokenizer#nextToken()").
added_calls("org.xbill.Task%.WorkerThread#<init>()","java.lang%.Thread#setDaemon(boolean)").
added_calls("org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)","java.lang%.Object#notify()").
added_calls("org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)","java.lang%.Thread#isAlive()").
added_calls("org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)","java.lang%.Thread#start()").
added_calls("org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)","org.xbill.Task%.WorkerThread#getThread()").
added_calls("org.xbill.Task%.WorkerThread#getThread()","java.lang%.Object#wait()").
added_calls("org.xbill.Task%.WorkerThread#getThread()","java.util%.Vector#firstElement()").
added_calls("org.xbill.Task%.WorkerThread#getThread()","java.util%.Vector#removeElement(java.lang%.Object)").
added_calls("org.xbill.Task%.WorkerThread#getThread()","java.util%.Vector#size()").
added_calls("org.xbill.Task%.WorkerThread#getThread()","org.xbill.Task%.WorkerThread#<init>()").
added_calls("org.xbill.Task%.WorkerThread#run()","java.lang%.Object#notify()").
added_calls("org.xbill.Task%.WorkerThread#run()","java.lang%.Object#wait(long)").
added_calls("org.xbill.Task%.WorkerThread#run()","java.lang%.Runnable#run()").
added_calls("org.xbill.Task%.WorkerThread#run()","java.lang%.Thread#setName(java.lang%.String)").
added_calls("org.xbill.Task%.WorkerThread#run()","java.util%.Vector#addElement(java.lang%.Object)").
added_calls("org.xbill.Task%.WorkerThread#run()","java.util%.Vector#removeElement(java.lang%.Object)").
added_field("org.xbill.DNS%.Cache#Element#credibility","credibility","org.xbill.DNS%.Cache#Element").
added_field("org.xbill.DNS%.Cache#Element#rrset","rrset","org.xbill.DNS%.Cache#Element").
added_field("org.xbill.DNS%.Cache#Element#srcid","srcid","org.xbill.DNS%.Cache#Element").
added_field("org.xbill.DNS%.Cache#Element#timeIn","timeIn","org.xbill.DNS%.Cache#Element").
added_field("org.xbill.DNS%.Cache#Element#ttl","ttl","org.xbill.DNS%.Cache#Element").
added_field("org.xbill.DNS%.DNSSEC#DH","DH","org.xbill.DNS%.DNSSEC").
added_field("org.xbill.DNS%.DNSSEC#DSA","DSA","org.xbill.DNS%.DNSSEC").
added_field("org.xbill.DNS%.DNSSEC#RSA","RSA","org.xbill.DNS%.DNSSEC").
added_field("org.xbill.DNS%.ExtendedResolver#QElement#obj","obj","org.xbill.DNS%.ExtendedResolver#QElement").
added_field("org.xbill.DNS%.ExtendedResolver#QElement#res","res","org.xbill.DNS%.ExtendedResolver#QElement").
added_field("org.xbill.DNS%.ExtendedResolver#Receiver#idMap","idMap","org.xbill.DNS%.ExtendedResolver#Receiver").
added_field("org.xbill.DNS%.ExtendedResolver#Receiver#queue","queue","org.xbill.DNS%.ExtendedResolver#Receiver").
added_field("org.xbill.DNS%.ExtendedResolver#retries","retries","org.xbill.DNS%.ExtendedResolver").
added_field("org.xbill.DNS%.RRset#Enumerator#count","count","org.xbill.DNS%.RRset#Enumerator").
added_field("org.xbill.DNS%.RRset#Enumerator#cycled","cycled","org.xbill.DNS%.RRset#Enumerator").
added_field("org.xbill.DNS%.RRset#Enumerator#first","first","org.xbill.DNS%.RRset#Enumerator").
added_field("org.xbill.DNS%.RRset#Enumerator#records","records","org.xbill.DNS%.RRset#Enumerator").
added_field("org.xbill.DNS%.RRset#Enumerator#size","size","org.xbill.DNS%.RRset#Enumerator").
added_field("org.xbill.DNS%.RRset#start","start","org.xbill.DNS%.RRset").
added_field("org.xbill.DNS%.ResolveThread#id","id","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#lifetime","lifetime","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#list","list","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#listener","listener","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#max","max","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#nactive","nactive","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#query","query","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.DNS%.ResolveThread#res","res","org.xbill.DNS%.ResolveThread").
added_field("org.xbill.Task%.WorkerThread#lifetime","lifetime","org.xbill.Task%.WorkerThread").
added_field("org.xbill.Task%.WorkerThread#list","list","org.xbill.Task%.WorkerThread").
added_field("org.xbill.Task%.WorkerThread#max","max","org.xbill.Task%.WorkerThread").
added_field("org.xbill.Task%.WorkerThread#nactive","nactive","org.xbill.Task%.WorkerThread").
added_field("org.xbill.Task%.WorkerThread#name","name","org.xbill.Task%.WorkerThread").
added_field("org.xbill.Task%.WorkerThread#task","task","org.xbill.Task%.WorkerThread").
added_fieldoftype("org.xbill.DNS%.Cache#Element#credibility","byte").
added_fieldoftype("org.xbill.DNS%.Cache#Element#rrset","org.xbill.DNS%.RRset").
added_fieldoftype("org.xbill.DNS%.Cache#Element#srcid","int").
added_fieldoftype("org.xbill.DNS%.Cache#Element#timeIn","long").
added_fieldoftype("org.xbill.DNS%.Cache#Element#ttl","int").
added_fieldoftype("org.xbill.DNS%.DNSSEC#DH","byte").
added_fieldoftype("org.xbill.DNS%.DNSSEC#DSA","byte").
added_fieldoftype("org.xbill.DNS%.DNSSEC#RSA","byte").
added_fieldoftype("org.xbill.DNS%.ExtendedResolver#QElement#obj","java.lang%.Object").
added_fieldoftype("org.xbill.DNS%.ExtendedResolver#QElement#res","int").
added_fieldoftype("org.xbill.DNS%.ExtendedResolver#Receiver#idMap","java.util%.Hashtable").
added_fieldoftype("org.xbill.DNS%.ExtendedResolver#Receiver#queue","java.util%.Vector").
added_fieldoftype("org.xbill.DNS%.ExtendedResolver#retries","byte").
added_fieldoftype("org.xbill.DNS%.FindServer#search","org.xbill.DNS%.Name[]").
added_fieldoftype("org.xbill.DNS%.RRset#Enumerator#count","int").
added_fieldoftype("org.xbill.DNS%.RRset#Enumerator#cycled","boolean").
added_fieldoftype("org.xbill.DNS%.RRset#Enumerator#first","int").
added_fieldoftype("org.xbill.DNS%.RRset#Enumerator#records","org.xbill.DNS%.Record[]").
added_fieldoftype("org.xbill.DNS%.RRset#Enumerator#size","int").
added_fieldoftype("org.xbill.DNS%.RRset#start","int").
added_fieldoftype("org.xbill.DNS%.ResolveThread#id","int").
added_fieldoftype("org.xbill.DNS%.ResolveThread#lifetime","long").
added_fieldoftype("org.xbill.DNS%.ResolveThread#list","java.util%.Vector").
added_fieldoftype("org.xbill.DNS%.ResolveThread#listener","org.xbill.DNS%.ResolverListener").
added_fieldoftype("org.xbill.DNS%.ResolveThread#max","int").
added_fieldoftype("org.xbill.DNS%.ResolveThread#nactive","int").
added_fieldoftype("org.xbill.DNS%.ResolveThread#query","org.xbill.DNS%.Message").
added_fieldoftype("org.xbill.DNS%.ResolveThread#res","org.xbill.DNS%.Resolver").
added_fieldoftype("org.xbill.DNS%.dns#searchPath","org.xbill.DNS%.Name[]").
added_fieldoftype("org.xbill.Task%.WorkerThread#lifetime","long").
added_fieldoftype("org.xbill.Task%.WorkerThread#list","java.util%.Vector").
added_fieldoftype("org.xbill.Task%.WorkerThread#max","int").
added_fieldoftype("org.xbill.Task%.WorkerThread#nactive","int").
added_fieldoftype("org.xbill.Task%.WorkerThread#name","java.lang%.String").
added_fieldoftype("org.xbill.Task%.WorkerThread#task","java.lang%.Runnable").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.ARecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.CERTRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.CNAMERecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.HINFORecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.KEYRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.MXRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.NSRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.NS_CNAME_PTRRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.NXTRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.OPTRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.PTRRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.SIGRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.SOARecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.SRVRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.TSIGRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.TXTRecord").
added_inheritedmethod("toWire(int)","org.xbill.DNS%.Record","org.xbill.DNS%.UNKRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.ARecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.CERTRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.CNAMERecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.HINFORecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.KEYRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.MXRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.NSRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.NS_CNAME_PTRRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.NXTRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.OPTRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.PTRRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.SIGRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.SOARecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.SRVRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.TSIGRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.TXTRecord").
added_inheritedmethod("toWireCanonical()","org.xbill.DNS%.Record","org.xbill.DNS%.UNKRecord").
added_method("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","%.dig").
added_method("%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","%.dig").
added_method("%.jnamed#addAdditional(org.xbill.DNS%.Message)","addAdditional(org.xbill.DNS%.Message)","%.jnamed").
added_method("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","addAdditional2(org.xbill.DNS%.Message,int)","%.jnamed").
added_method("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","%.jnamed").
added_method("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","%.jnamed").
added_method("%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","%.jnamed").
added_method("%.jnamed#findBestZone(org.xbill.DNS%.Name)","findBestZone(org.xbill.DNS%.Name)","%.jnamed").
added_method("%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","%.jnamed").
added_method("%.jnamed#findTSIG(org.xbill.DNS%.Name)","findTSIG(org.xbill.DNS%.Name)","%.jnamed").
added_method("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","generateReply(org.xbill.DNS%.Message,byte[],int)","%.jnamed").
added_method("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","notimplMessage(org.xbill.DNS%.Message)","%.jnamed").
added_method("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","truncate(org.xbill.DNS%.Message,int,int)","%.jnamed").
added_method("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","truncateSection(org.xbill.DNS%.Message,int,int,int)","%.jnamed").
added_method("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","%.update").
added_method("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)","doLog(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","%.update").
added_method("%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)","parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)","%.update").
added_method("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","%.update").
added_method("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","%.update").
added_method("org.xbill.DNS%.Address#<init>()","<init>()","org.xbill.DNS%.Address").
added_method("org.xbill.DNS%.Cache#Element#<init>(int,byte,int)","<init>(int,byte,int)","org.xbill.DNS%.Cache#Element").
added_method("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)","<init>(org.xbill.DNS%.RRset,byte,int)","org.xbill.DNS%.Cache#Element").
added_method("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)","<init>(org.xbill.DNS%.Record,byte,int)","org.xbill.DNS%.Cache#Element").
added_method("org.xbill.DNS%.DNSSEC#<init>()","<init>()","org.xbill.DNS%.DNSSEC").
added_method("org.xbill.DNS%.EDNS#<init>()","<init>()","org.xbill.DNS%.EDNS").
added_method("org.xbill.DNS%.ExtendedResolver#QElement#<init>(java.lang%.Object,int)","<init>(java.lang%.Object,int)","org.xbill.DNS%.ExtendedResolver#QElement").
added_method("org.xbill.DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)","<init>(java.util%.Vector,java.util%.Hashtable)","org.xbill.DNS%.ExtendedResolver#Receiver").
added_method("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","enqueueInfo(int,java.lang%.Object)","org.xbill.DNS%.ExtendedResolver#Receiver").
added_method("org.xbill.DNS%.ExtendedResolver#Receiver#handleException(int,java.lang%.Exception)","handleException(int,java.lang%.Exception)","org.xbill.DNS%.ExtendedResolver#Receiver").
added_method("org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)","Receiver,java.util%.Hashtable,int)","org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver").
added_method("org.xbill.DNS%.RRset#Enumerator#<init>()","<init>()","org.xbill.DNS%.RRset#Enumerator").
added_method("org.xbill.DNS%.RRset#Enumerator#hasMoreElements()","hasMoreElements()","org.xbill.DNS%.RRset#Enumerator").
added_method("org.xbill.DNS%.RRset#Enumerator#nextElement()","nextElement()","org.xbill.DNS%.RRset#Enumerator").
added_method("org.xbill.DNS%.Record#toWire(int)","toWire(int)","org.xbill.DNS%.Record").
added_method("org.xbill.DNS%.Record#toWireCanonical()","toWireCanonical()","org.xbill.DNS%.Record").
added_method("org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)","<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)","org.xbill.DNS%.ResolveThread").
added_method("org.xbill.DNS%.ResolveThread#run()","run()","org.xbill.DNS%.ResolveThread").
added_method("org.xbill.DNS%.ResolverListener#handleException(int,java.lang%.Exception)","handleException(int,java.lang%.Exception)","org.xbill.DNS%.ResolverListener").
added_method("org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","org.xbill.DNS%.TSIGRecord").
added_method("org.xbill.DNS%.WireParseException#<init>()","<init>()","org.xbill.DNS%.WireParseException").
added_method("org.xbill.DNS%.WireParseException#<init>(java.lang%.String)","<init>(java.lang%.String)","org.xbill.DNS%.WireParseException").
added_method("org.xbill.DNS.utils%.DataByteInputStream#read(byte[])","read(byte[])","org.xbill.DNS.utils%.DataByteInputStream").
added_method("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","main(java.lang%.String[])","org.xbill.DNS.utils%.MyStringTokenizer").
added_method("org.xbill.Task%.WorkerThread#<init>()","<init>()","org.xbill.Task%.WorkerThread").
added_method("org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)","assignThread(java.lang%.Runnable,java.lang%.String)","org.xbill.Task%.WorkerThread").
added_method("org.xbill.Task%.WorkerThread#getThread()","getThread()","org.xbill.Task%.WorkerThread").
added_method("org.xbill.Task%.WorkerThread#run()","run()","org.xbill.Task%.WorkerThread").
added_package("org.xbill.Task").
added_return("%.dig#doAXFR(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","void").
added_return("%.dig#doQuery(org.xbill.DNS%.Message,org.xbill.DNS%.Resolver)","void").
added_return("%.jnamed#addAdditional(org.xbill.DNS%.Message)","void").
added_return("%.jnamed#addAdditional2(org.xbill.DNS%.Message,int)","void").
added_return("%.jnamed#addAuthority(org.xbill.DNS%.Message,org.xbill.DNS%.Name,org.xbill.DNS%.Zone)","void").
added_return("%.jnamed#addGlue(org.xbill.DNS%.Message,org.xbill.DNS%.Name)","void").
added_return("%.jnamed#addRRset(org.xbill.DNS%.Message,org.xbill.DNS%.RRset)","void").
added_return("%.jnamed#findBestZone(org.xbill.DNS%.Name)","org.xbill.DNS%.Zone").
added_return("%.jnamed#findExactMatch(org.xbill.DNS%.Name,short,short,boolean)","org.xbill.DNS%.RRset").
added_return("%.jnamed#findTSIG(org.xbill.DNS%.Name)","org.xbill.DNS%.TSIG").
added_return("%.jnamed#generateReply(org.xbill.DNS%.Message,byte[],int)","org.xbill.DNS%.Message").
added_return("%.jnamed#notimplMessage(org.xbill.DNS%.Message)","org.xbill.DNS%.Message").
added_return("%.jnamed#truncate(org.xbill.DNS%.Message,int,int)","void").
added_return("%.jnamed#truncateSection(org.xbill.DNS%.Message,int,int,int)","int").
added_return("%.update#doAdd(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#doAssert(org.xbill.DNS.utils%.MyStringTokenizer)","boolean").
added_return("%.update#doDelete(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#doFile(org.xbill.DNS.utils%.MyStringTokenizer,java.util%.Vector,java.util%.Vector)","void").
added_return("%.update#doGlue(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#doLog(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#doProhibit(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#doQuery(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#doRequire(org.xbill.DNS.utils%.MyStringTokenizer)","void").
added_return("%.update#parseName(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Record").
added_return("%.update#parseRR(org.xbill.DNS.utils%.MyStringTokenizer,short,int)","org.xbill.DNS%.Record").
added_return("%.update#parseSet(org.xbill.DNS.utils%.MyStringTokenizer,short)","org.xbill.DNS%.Record").
added_return("org.xbill.DNS%.Address#<init>()","void").
added_return("org.xbill.DNS%.Cache#Element#<init>(int,byte,int)","void").
added_return("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.RRset,byte,int)","void").
added_return("org.xbill.DNS%.Cache#Element#<init>(org.xbill.DNS%.Record,byte,int)","void").
added_return("org.xbill.DNS%.Cache#findAnyRecords(org.xbill.DNS%.Name,short,short)","org.xbill.DNS%.RRset[]").
added_return("org.xbill.DNS%.Cache#findRecords(org.xbill.DNS%.Name,short,short)","org.xbill.DNS%.RRset[]").
added_return("org.xbill.DNS%.Cache#findRecords(org.xbill.DNS%.Name,short,short,byte)","org.xbill.DNS%.RRset[]").
added_return("org.xbill.DNS%.DNSSEC#<init>()","void").
added_return("org.xbill.DNS%.EDNS#<init>()","void").
added_return("org.xbill.DNS%.ExtendedResolver#QElement#<init>(java.lang%.Object,int)","void").
added_return("org.xbill.DNS%.ExtendedResolver#Receiver#<init>(java.util%.Vector,java.util%.Hashtable)","void").
added_return("org.xbill.DNS%.ExtendedResolver#Receiver#enqueueInfo(int,java.lang%.Object)","void").
added_return("org.xbill.DNS%.ExtendedResolver#Receiver#handleException(int,java.lang%.Exception)","void").
added_return("org.xbill.DNS%.ExtendedResolver#getResolvers()","org.xbill.DNS%.Resolver[]").
added_return("org.xbill.DNS%.ExtendedResolver#sendTo(org.xbill.DNS%.Message,org.xbill.DNS%.ExtendedResolver#Receiver,java.util%.Hashtable,int)","void").
added_return("org.xbill.DNS%.FindServer#searchPath()","org.xbill.DNS%.Name[]").
added_return("org.xbill.DNS%.Message#getSectionArray(int)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.RRset#Enumerator#<init>()","void").
added_return("org.xbill.DNS%.RRset#Enumerator#hasMoreElements()","boolean").
added_return("org.xbill.DNS%.RRset#Enumerator#nextElement()","java.lang%.Object").
added_return("org.xbill.DNS%.Record#toWire(int)","byte[]").
added_return("org.xbill.DNS%.Record#toWireCanonical()","byte[]").
added_return("org.xbill.DNS%.ResolveThread#<init>(org.xbill.DNS%.Resolver,org.xbill.DNS%.Message,int,org.xbill.DNS%.ResolverListener)","void").
added_return("org.xbill.DNS%.ResolveThread#run()","void").
added_return("org.xbill.DNS%.ResolverListener#handleException(int,java.lang%.Exception)","void").
added_return("org.xbill.DNS%.SetResponse#answers()","org.xbill.DNS%.RRset[]").
added_return("org.xbill.DNS%.TSIGRecord#<init>(org.xbill.DNS%.Name,short,int,org.xbill.DNS%.Name,java.util%.Date,short,byte[],int,short,byte[])","void").
added_return("org.xbill.DNS%.WireParseException#<init>()","void").
added_return("org.xbill.DNS%.WireParseException#<init>(java.lang%.String)","void").
added_return("org.xbill.DNS%.dns#getAnyRecords(java.lang%.String,short)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#getAnyRecords(java.lang%.String,short,short)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#getAnyRecordsByAddress(java.lang%.String,short)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#getRecords(java.lang%.String,short)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#getRecords(java.lang%.String,short,short)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#getRecords(java.lang%.String,short,short,byte)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#getRecordsByAddress(java.lang%.String,short)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS%.dns#lookup(org.xbill.DNS%.Name,short,short,byte)","org.xbill.DNS%.Record[]").
added_return("org.xbill.DNS.utils%.DataByteInputStream#read(byte[])","int").
added_return("org.xbill.DNS.utils%.MyStringTokenizer#main(java.lang%.String[])","void").
added_return("org.xbill.Task%.WorkerThread#<init>()","void").
added_return("org.xbill.Task%.WorkerThread#assignThread(java.lang%.Runnable,java.lang%.String)","void").
added_return("org.xbill.Task%.WorkerThread#getThread()","org.xbill.Task%.WorkerThread").
added_return("org.xbill.Task%.WorkerThread#run()","void").
added_subtype("java.io%.IOException","org.xbill.DNS%.WireParseException").
added_subtype("java.lang%.Object","org.xbill.DNS%.Cache#Element").
added_subtype("java.lang%.Object","org.xbill.DNS%.DNSSEC").
added_subtype("java.lang%.Object","org.xbill.DNS%.ExtendedResolver#QElement").
added_subtype("java.lang%.Object","org.xbill.DNS%.ExtendedResolver#Receiver").
added_subtype("java.lang%.Object","org.xbill.DNS%.RRset#Enumerator").
added_subtype("java.lang%.Object","org.xbill.DNS%.ResolveThread").
added_subtype("java.lang%.Runnable","org.xbill.DNS%.ResolveThread").
added_subtype("java.lang%.Thread","org.xbill.Task%.WorkerThread").
added_subtype("java.util%.Enumeration","org.xbill.DNS%.RRset#Enumerator").
added_subtype("java.util%.EventListener","org.xbill.DNS%.ExtendedResolver#Receiver").
added_subtype("org.xbill.DNS%.ResolverListener","org.xbill.DNS%.ExtendedResolver#Receiver").
added_type("org.xbill.DNS%.Cache#Element","Cache#Element","org.xbill.DNS").
added_type("org.xbill.DNS%.DNSSEC","DNSSEC","org.xbill.DNS").
added_type("org.xbill.DNS%.ExtendedResolver#QElement","ExtendedResolver#QElement","org.xbill.DNS").
added_type("org.xbill.DNS%.ExtendedResolver#Receiver","ExtendedResolver#Receiver","org.xbill.DNS").
added_type("org.xbill.DNS%.RRset#Enumerator","RRset#Enumerator","org.xbill.DNS").
added_type("org.xbill.DNS%.ResolveThread","ResolveThread","org.xbill.DNS").
added_type("org.xbill.DNS%.WireParseException","WireParseException","org.xbill.DNS").
added_type("org.xbill.Task%.WorkerThread","WorkerThread","org.xbill.Task").
added_typeintype("org.xbill.DNS%.Cache#Element","org.xbill.DNS%.Cache").
added_typeintype("org.xbill.DNS%.ExtendedResolver#QElement","org.xbill.DNS%.ExtendedResolver").
added_typeintype("org.xbill.DNS%.ExtendedResolver#Receiver","org.xbill.DNS%.ExtendedResolver").
added_typeintype("org.xbill.DNS%.RRset#Enumerator","org.xbill.DNS%.RRset").
