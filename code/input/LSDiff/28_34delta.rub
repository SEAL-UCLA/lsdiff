#include "deltaKB_lsdPred.rub"
// Orig. Deleted	21
// Orig. Added	66
// Red. Deleted	21
// Red. Added	66
deleted_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#trb","edu.washington.cs.lsd.factbase%.LSDFactBase#load2KBFactBase(java.io%.File)").
deleted_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#trb","edu.washington.cs.lsd.factbase%.LSDFactBase#loadDeltaKBFactBase(java.io%.File)").
deleted_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#trb","edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()").
deleted_accesses("java.lang%.System#out","edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#invokeQuery(edu.washington.cs.lsd.rule%.LSDRule,boolean)").
deleted_accesses("java.lang%.System#out","edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#main(java.lang%.String[])").
deleted_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.AbstractList<LSDRule>#iterator()").
deleted_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.ArrayList<LSDRule>#<init>()").
deleted_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()","java.util%.ArrayList<LSDRule>#isEmpty()").
deleted_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()","java.util%.HashSet<LSDFact>#<init>()").
deleted_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.util%.ArrayList<LSDLiteral>#get(int)").
deleted_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.util%.ArrayList<LSDLiteral>#size()").
deleted_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#invokeQuery(edu.washington.cs.lsd.rule%.LSDRule,boolean)","java.io%.PrintStream#println(java.lang%.String)").
deleted_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#main(java.lang%.String[])","edu.washington.cs.lsd.rule%.LSDRule#toString()").
deleted_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#main(java.lang%.String[])","edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#getCounterExamples(edu.washington.cs.lsd.rule%.LSDRule)").
deleted_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#main(java.lang%.String[])","java.io%.PrintStream#println(java.lang%.String)").
deleted_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#main(java.lang%.String[])","java.util%.ArrayList<LSDRule>#get(int)").
deleted_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#main(java.lang%.String[])","java.util%.ArrayList<LSDRule>#size()").
deleted_field("edu.washington.cs.lsd.factbase%.LSDFactBase#trb","trb","edu.washington.cs.lsd.factbase%.LSDFactBase").
deleted_fieldoftype("edu.washington.cs.lsd.factbase%.LSDFactBase#trb","edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker").
deleted_return("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#getCounterExamples(edu.washington.cs.lsd.rule%.LSDRule)","java.util%.ArrayList<LSDRule>").
deleted_return("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#invokeQuery(edu.washington.cs.lsd.rule%.LSDRule,boolean)","java.util%.ArrayList<LSDRule>").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#matched","edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleChecker","edu.washington.cs.lsd.factbase%.LSDFactBase#load2KBFactBase(java.io%.File)").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleChecker","edu.washington.cs.lsd.factbase%.LSDFactBase#loadDeltaKBFactBase(java.io%.File)").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleChecker","edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleExceptions","edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleExceptions","edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()").
added_accesses("edu.washington.cs.lsd.factbase%.LSDFactBase#winnowed","edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)").
added_accesses("edu.washington.cs.lsd.rule%.LSDLiteral#bindings","edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()").
added_accesses("edu.washington.cs.lsd.rule%.LSDLiteral#predicate","edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()").
added_accesses("java.lang%.System#err","edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)").
added_accesses("java.lang%.System#err","edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","java.io%.PrintStream#println(java.lang%.String)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","java.util%.HashMap<LSDRule,List<Map<LSDVariable,String>>>#containsKey(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","java.util%.HashMap<LSDRule,List<Map<LSDVariable,String>>>#get(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.io%.PrintStream#println(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.lang%.Float#<init>(float)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.lang%.Float#isNaN()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.lang%.String#equals(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.lang%.Thread#sleep(long)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Iterator<LSDVariable>#hasNext()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Iterator<LSDVariable>#next()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Iterator<Map<LSDVariable,String>>#hasNext()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Iterator<Map<LSDVariable,String>>#next()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Iterator<String>#hasNext()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Iterator<String>#next()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.LinkedHashMap<String,List<LSDRule>>#<init>()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.List<LSDFact>#size()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.List<LSDRule>#iterator()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.List<Map<LSDVariable,String>>#isEmpty()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.List<Map<LSDVariable,String>>#iterator()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.List<Map<LSDVariable,String>>#size()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Map<LSDVariable,String>#get(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Map<LSDVariable,String>#keySet()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Map<String,List<LSDRule>>#get(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Map<String,List<LSDRule>>#keySet()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Map<String,List<LSDRule>>#put(java.lang%.String,java.util%.List<LSDRule>)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Set<LSDVariable>#iterator()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#main(java.lang%.String[])","java.util%.Set<String>#iterator()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()","java.util%.ArrayList<LSDFact>#size()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()","java.util%.HashMap<LSDRule,List<Map<LSDVariable,String>>>#put(edu.washington.cs.lsd.rule%.LSDRule,java.util%.List<Map<LSDVariable,String>>)").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()","java.util%.List<Map<LSDVariable,String>>#isEmpty()").
added_calls("edu.washington.cs.lsd.factbase%.LSDFactBase#winnow()","java.util%.List<Map<LSDVariable,String>>#size()").
added_calls("edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()","edu.washington.cs.lsd.rule%.LSDLiteral#<init>(edu.washington.cs.lsd.rule%.LSDPredicate,java.util%.ArrayList<LSDBinding>,boolean)").
added_calls("edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()","java.io%.PrintStream#println(java.lang%.String)").
added_calls("edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()","java.lang%.System#exit(int)").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","edu.washington.cs.lsd.rule%.LSDLiteral#isNegated()").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.lang%.String#endsWith(java.lang%.String)").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.lang%.String#equals(java.lang%.Object)").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.util%.AbstractList<LSDLiteral>#iterator()").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.util%.Iterator<LSDLiteral>#hasNext()").
added_calls("edu.washington.cs.lsd.rule%.LSDRule#toString()","java.util%.Iterator<LSDLiteral>#next()").
added_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#invokeQuery(edu.washington.cs.lsd.rule%.LSDRule,boolean)","java.util%.ArrayList<Map<LSDVariable,String>>#<init>()").
added_calls("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#invokeQuery(edu.washington.cs.lsd.rule%.LSDRule,boolean)","java.util%.ArrayList<Map<LSDVariable,String>>#add(java.util%.Map<LSDVariable,String>)").
added_field("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleChecker","ruleChecker","edu.washington.cs.lsd.factbase%.LSDFactBase").
added_field("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleExceptions","ruleExceptions","edu.washington.cs.lsd.factbase%.LSDFactBase").
added_fieldoftype("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleChecker","edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker").
added_fieldoftype("edu.washington.cs.lsd.factbase%.LSDFactBase#ruleExceptions","java.util%.HashMap<LSDRule,List<Map<LSDVariable,String>>>").
added_method("edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","edu.washington.cs.lsd.factbase%.LSDFactBase").
added_method("edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()","nonNegatedCopy()","edu.washington.cs.lsd.rule%.LSDLiteral").
added_return("edu.washington.cs.lsd.factbase%.LSDFactBase#getExceptions(edu.washington.cs.lsd.rule%.LSDRule)","java.util%.List<Map<LSDVariable,String>>").
added_return("edu.washington.cs.lsd.rule%.LSDLiteral#nonNegatedCopy()","edu.washington.cs.lsd.rule%.LSDLiteral").
added_return("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#getCounterExamples(edu.washington.cs.lsd.rule%.LSDRule)","java.util%.List<Map<LSDVariable,String>>").
added_return("edu.washington.cs.lsd.rule.io%.LSDTyrubaRuleChecker#invokeQuery(edu.washington.cs.lsd.rule%.LSDRule,boolean)","java.lang%.Object").
