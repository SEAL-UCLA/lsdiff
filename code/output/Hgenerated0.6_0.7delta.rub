The following facts (81/89)were not matched by any rule:
	deleted_accesses("%.jnamed#cache","%.jnamed#findBestZone(DNS%.Name)")
	deleted_accesses("DNS%.DClass#IN","DNS%.Record#toStringNoData()")
	deleted_accesses("DNS%.Name#root","DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)")
	deleted_accesses("DNS%.Rcode#SERVFAIL","%.jnamed#generateReply(DNS%.Message,byte[],int)")
	deleted_accesses("DNS%.Record#name","DNS%.Zone#addRR(DNS%.Record)")
	deleted_accesses("DNS%.Zone#CACHE","%.jnamed#<init>(java.lang%.String)")
	deleted_accesses("DNS%.Zone#CACHE","DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)")
	deleted_accesses("DNS%.Zone#PRIMARY","%.jnamed#<init>(java.lang%.String)")
	deleted_calls("%.jnamed#<init>(java.lang%.String)","DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)")
	deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short)","DNS%.Zone#findName(DNS%.Name)")
	deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short)","java.lang%.Short#<init>(short)")
	deleted_calls("%.jnamed#findExactMatch(DNS%.Name,short,short)","java.util%.Hashtable#get(java.lang%.Object)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","DNS%.IO#readExtendedLine(java.io%.BufferedReader)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","DNS%.MyStringTokenizer#<init>(java.lang%.String)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","DNS%.MyStringTokenizer#nextToken()")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","DNS%.MyStringTokenizer#putBackToken(java.lang%.String)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.io%.BufferedReader#<init>(java.io%.Reader)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.io%.FileInputStream#<init>(java.lang%.String)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.io%.IOException#<init>(java.lang%.String)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.io%.InputStreamReader#<init>(java.io%.InputStream)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.lang%.String#equals(java.lang%.Object)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.lang%.String#length()")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.lang%.String#startsWith(java.lang%.String)")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.lang%.Throwable#toString()")
	deleted_calls("DNS%.Zone#<init>(java.lang%.String,int,DNS%.Zone)","java.util%.Hashtable#<init>()")
	deleted_calls("DNS%.Zone#addRR(DNS%.Record)","java.lang%.Short#<init>(short)")
	deleted_calls("DNS%.Zone#addRR(DNS%.Record)","java.util%.Hashtable#<init>()")
	deleted_calls("DNS%.Zone#addRR(DNS%.Record)","java.util%.Hashtable#get(java.lang%.Object)")
	deleted_calls("DNS%.Zone#addRR(DNS%.Record)","java.util%.Hashtable#put(java.lang%.Object,java.lang%.Object)")
	deleted_calls("DNS%.Zone#findName(DNS%.Name)","java.util%.Hashtable#get(java.lang%.Object)")
	deleted_calls("DNS%.Zone#getNS()","DNS%.Zone#findName(DNS%.Name)")
	deleted_calls("DNS%.Zone#getNS()","java.lang%.Short#<init>(short)")
	deleted_calls("DNS%.Zone#getNS()","java.util%.Hashtable#get(java.lang%.Object)")
	deleted_calls("DNS%.Zone#getSOA()","DNS%.Zone#findName(DNS%.Name)")
	deleted_calls("DNS%.Zone#getSOA()","java.lang%.Short#<init>(short)")
	deleted_calls("DNS%.Zone#getSOA()","java.util%.Hashtable#get(java.lang%.Object)")
	deleted_field("DNS%.RRset#name","name","DNS%.RRset")
	deleted_field("DNS%.RRset#type","type","DNS%.RRset")
	deleted_field("DNS%.Zone#data","data","DNS%.Zone")
	deleted_field("DNS%.dns#_res","_res","DNS%.dns")
	deleted_fieldoftype("%.jnamed#cache","DNS%.Zone")
	deleted_method("DNS%.RRset#addSIG(DNS%.SIGRecord)","addSIG(DNS%.SIGRecord)","DNS%.RRset")
	deleted_method("DNS%.Zone#parseOrigin(DNS%.MyStringTokenizer)","parseOrigin(DNS%.MyStringTokenizer)","DNS%.Zone")
	deleted_method("DNS%.Zone#parseRR(DNS%.MyStringTokenizer,boolean,DNS%.Record,DNS%.Name)","parseRR(DNS%.MyStringTokenizer,boolean,DNS%.Record,DNS%.Name)","DNS%.Zone")
	deleted_method("DNS%.dns#getRecords(DNS%.Resolver,java.lang%.String,short)","getRecords(DNS%.Resolver,java.lang%.String,short)","DNS%.dns")
	deleted_method("DNS%.dns#getRecords(DNS%.Resolver,java.lang%.String,short,short)","getRecords(DNS%.Resolver,java.lang%.String,short,short)","DNS%.dns")
	deleted_method("DNS%.dns#getRecordsByAddress(DNS%.Resolver,java.lang%.String,short)","getRecordsByAddress(DNS%.Resolver,java.lang%.String,short)","DNS%.dns")
	added_accesses("%.jnamed#cache","%.jnamed#findExactMatch(DNS%.Name,short,short,boolean)")
	added_accesses("DNS%.DClass#IN","DNS%.dns#getRecordsByAddress(java.lang%.String,short)")
	added_accesses("DNS%.Message#size","DNS%.Message#toWire()")
	added_accesses("DNS%.Name#root","%.jnamed#addAuthority(DNS%.Message,DNS%.Name,DNS%.Zone)")
	added_accesses("DNS%.RRset#sigs","DNS%.RRset#addRR(DNS%.Record)")
	added_accesses("DNS%.Type#PTR","%.dig#main(java.lang%.String[])")
	added_accesses("DNS%.Type#SIG","DNS%.RRset#addRR(DNS%.Record)")
	added_accesses("DNS%.Type#SOA","DNS%.Zone#<init>(java.lang%.String,DNS%.Cache)")
	added_accesses("DNS%.Zone#PRIMARY","DNS%.Zone#<init>(java.lang%.String,DNS%.Cache)")
	added_calls("%.dig#main(java.lang%.String[])","java.lang%.String#equals(java.lang%.Object)")
	added_calls("DNS%.Message#toWire()","DNS.utils%.DataByteOutputStream#getPos()")
	added_calls("DNS%.Name#hashCode()","java.lang%.Character#toLowerCase(char)")
	added_calls("DNS%.RRset#addRR(DNS%.Record)","DNS%.Record#getType()")
	added_calls("DNS%.RRset#addRR(DNS%.Record)","java.util%.Vector#contains(java.lang%.Object)")
	added_calls("DNS%.Zone#<init>(java.lang%.String,DNS%.Cache)","DNS%.Record#getType()")
	added_field("DNS%.dns#cache","cache","DNS%.dns")
	added_field("DNS%.dns#res","res","DNS%.dns")
	added_fieldoftype("%.jnamed#cache","DNS%.Cache")
	added_method("DNS%.Message#getQuestion()","getQuestion()","DNS%.Message")
	added_method("DNS%.Name#isWild()","isWild()","DNS%.Name")
	added_method("DNS%.Name#wild()","wild()","DNS%.Name")
	added_method("DNS%.RRset#size()","size()","DNS%.RRset")
	added_method("DNS%.Type#isRR(int)","isRR(int)","DNS%.Type")
	added_method("DNS%.Zone#findRecords(DNS%.Name,short)","findRecords(DNS%.Name,short)","DNS%.Zone")
	added_method("DNS%.dns#getRecords(java.lang%.String,short,short,byte)","getRecords(java.lang%.String,short,short,byte)","DNS%.dns")
	added_method("DNS%.dns#inaddrString(java.lang%.String)","inaddrString(java.lang%.String)","DNS%.dns")
	added_method("DNS%.dns#inaddrString(java.net%.InetAddress)","inaddrString(java.net%.InetAddress)","DNS%.dns")
	added_method("DNS%.dns#setResolver(DNS%.Resolver)","setResolver(DNS%.Resolver)","DNS%.dns")
	added_type("DNS%.Address","Address","DNS")
	added_type("DNS%.Cache","Cache","DNS")
	added_type("DNS%.CacheResponse","CacheResponse","DNS")
	added_type("DNS%.Credibility","Credibility","DNS")
	added_type("DNS%.Master","Master","DNS")
	added_type("DNS%.NameSet","NameSet","DNS")


	after_calls(?x3,?x0) ^ after_calls(?x3,"java.lang%.Object#hashCode()") => added_method(?x0,?x1,?x2)	(12/16)
	#P:	added_method("DNS%.Cache#CacheElement#<init>(int,byte,int)","<init>(int,byte,int)","DNS%.Cache#CacheElement")
	#P:	added_method("DNS%.NameSet#addSet(DNS%.Name,short,java.lang%.Object)","addSet(DNS%.Name,short,java.lang%.Object)","DNS%.NameSet")
	#P:	added_method("DNS%.NameSet#findSet(DNS%.Name,short)","findSet(DNS%.Name,short)","DNS%.NameSet")
	#P:	added_method("DNS%.Cache#CacheElement#<init>(DNS%.RRset,byte,int)","<init>(DNS%.RRset,byte,int)","DNS%.Cache#CacheElement")
	#P:	added_method("DNS%.RRset#getName()","getName()","DNS%.RRset")
	#P:	added_method("DNS%.RRset#getTTL()","getTTL()","DNS%.RRset")
	#P:	added_method("DNS%.RRset#getType()","getType()","DNS%.RRset")
	#P:	added_method("DNS%.Cache#CacheElement#<init>(DNS%.Record,byte,int)","<init>(DNS%.Record,byte,int)","DNS%.Cache#CacheElement")
	#P:	added_method("DNS%.Cache#CacheElement#update(DNS%.Record)","update(DNS%.Record)","DNS%.Cache#CacheElement")
	#P:	added_method("DNS%.NameSet#findExactSet(DNS%.Name,short)","findExactSet(DNS%.Name,short)","DNS%.NameSet")
	#P:	added_method("DNS%.RRset#clear()","clear()","DNS%.RRset")
	#P:	added_method("DNS%.Record#getRRsetType()","getRRsetType()","DNS%.Record")
	    Except:

		(?x0="java.lang%.Object#hashCode()")
		(?x0="DNS%.Record#getName()")
		(?x0="DNS%.Record#getTTL()")
		(?x0="DNS%.Record#toWire(int)")

	after_accesses("DNS%.Credibility#AUTH_ADDITIONAL",?x0) ^ after_method(?x0,?x1,"DNS%.dns") => added_method(?x0,?x1,"DNS%.dns")	(3/3)
	#P:	added_method("DNS%.dns#getAnyRecords(java.lang%.String,short)","getAnyRecords(java.lang%.String,short)","DNS%.dns")
	#P:	added_method("DNS%.dns#getAnyRecords(java.lang%.String,short,short)","getAnyRecords(java.lang%.String,short,short)","DNS%.dns")
	#P:	added_method("DNS%.dns#getAnyRecordsByAddress(java.lang%.String,short)","getAnyRecordsByAddress(java.lang%.String,short)","DNS%.dns")
